<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React搭配Mobx开发</title>
    <link href="/20211222/React%E6%90%AD%E9%85%8DMobx%E5%BC%80%E5%8F%91/"/>
    <url>/20211222/React%E6%90%AD%E9%85%8DMobx%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>今天试了一下React搭配Mobx开发，确实好用</p><p>先挖个坑，有空来填</p>]]></content>
    
    
    <categories>
      
      <category>技术类-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React随笔</title>
    <link href="/20211218/React%E9%9A%8F%E7%AC%94/"/>
    <url>/20211218/React%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<h2 id="React-中的this"><a href="#React-中的this" class="headerlink" title="React 中的this"></a>React 中的<code>this</code></h2><p>React 的官方文档里写的自定义的方法都需要用 bind 方法绑定一下才能使用，否则 this 会出现指向问题，那究竟是为什么呢？</p><h3 id="探讨一"><a href="#探讨一" class="headerlink" title="探讨一"></a>探讨一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            ......<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;demo&#125;</span>&gt;</span>你好，DexterHwang<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state)   <span class="hljs-comment">// 会报错，注意此处的this</span><br>&#125;<br><br>ReactDom.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><p><code>React</code> 中的 <code>Babel</code> 使用了严格模式，所以写的全局的 <code>this</code>指向的是<code>undefined</code></p><p>而且 <code>demo</code> 方法并不写在 <code>Person</code> 类中，所以这个 <code>this</code> 也不会指向 <code>Person</code> 的实例对象</p><h3 id="探讨二"><a href="#探讨二" class="headerlink" title="探讨二"></a>探讨二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            ......<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;demo&#125;</span>&gt;</span>你好，DexterHwang<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> <span class="hljs-comment">// 会报错，报错信息为：`demo is not defined`。`onClick=&#123;demo&#125;`是找不到 `demo` 方法的</span><br>        <span class="hljs-comment">// return &lt;div onClick=&#123;this.demo&#125;&gt;你好，DexterHwang&lt;/div&gt; // 这样写也会报错，因为并不是通过实例对象去调用demo方法。由于demo是作为onClick的回调，不是通过实例调用的，是直接调用。类中的方法默认开启了局部的严格模式，所以this值是undefined</span><br>    &#125;<br>    <span class="hljs-comment">// demo方法在Person的原型对象(prototype)上，也就是在Person的实例对象的原型链上(_proto_)</span><br>    <span class="hljs-comment">// 只有通过Person实例对象调用demo方法时，demo里面的this指向的就是Person的实例对象</span><br>    <span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>    &#125;<br>&#125;<br><br>ReactDom.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure><p>我们看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">study</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;DexterHwang&quot;</span>, <span class="hljs-number">18</span>);<br><br>p1.study(); <span class="hljs-comment">//&#123;name:&#x27;DexterHwang&#x27;,age:18&#125;</span><br><span class="hljs-keyword">const</span> x = p1.study;<br>x(); <span class="hljs-comment">// 输出undefined</span><br></code></pre></td></tr></table></figure><p>p1 的原型链上是可以找到 study 方法的，然后把 study 方法赋值给了 x。也就相当于在栈上多了一个指针指向了 study 方法，这下 x 就彻底和 p1 没有关系了</p><p>另外，再明确一点：_类中自定义的方法，都会启用局部严格模式_。也就是说 this 的值是 undefined</p><p>也就是说 x 执行后 this 值就是 undefined</p><p>验证：<em>类中自定义的方法，都会启用局部严格模式</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test2</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-meta">  &quot;use strict&quot;</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;<br><br>test(); <span class="hljs-comment">// window</span><br>test2(); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h3 id="分析-this-demo-this-demo-bind-this"><a href="#分析-this-demo-this-demo-bind-this" class="headerlink" title="分析 this.demo = this.demo.bind(this)"></a>分析 <code>this.demo = this.demo.bind(this)</code></h3><p>为什么用 bind()就可以解决 this 指向问题呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            ......<br>        &#125;<br>        <span class="hljs-built_in">this</span>.demo = <span class="hljs-built_in">this</span>.demo.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.demo&#125;</span>&gt;</span>你好，DexterHwang<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>    &#125;<br>&#125;<br><br>ReactDom.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br><br><span class="hljs-comment">// 点击后会输出：Person&#123;...&#125;</span><br></code></pre></td></tr></table></figure><p>分析<code>this.demo = this.demo.bind(this)</code></p><p>等号右侧的第一个 this 指向的是实例对象，这个实例对象上有 demo 方法吗？有，但是实在原型链上的。</p><p>bind 方法做两件事：</p><ol><li>将 this 牢牢的绑定到传入的参数上</li><li>返回一个新的函数</li></ol><p>等号右边第二个 this，也就是传入的参数，这个 this 指的就是实例对象</p><p>这样的话返回了一个新的函数，而且这个函数牢牢的绑定到了实例对象上，并不需要去原型链上找了</p><p>再看等号左侧，将返回的新函数赋值给了 this，这个 this 也是 Person 实例对象，用相同的方法名接收一下</p><p>这样就可以使用了</p><p>我们这样再去看<code>onClick=&#123;this.demo&#125;</code>,这下再点击后执行的就是实例自身上的 demo 方法了。</p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2>]]></content>
    
    
    <categories>
      
      <category>技术类-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript的同步与异步</title>
    <link href="/20211214/JavaScript%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <url>/20211214/JavaScript%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing">更详细的可以点这里</a></p><h2 id="异步JavaScript"><a href="#异步JavaScript" class="headerlink" title="异步JavaScript"></a><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Asynchronous">异步JavaScript</a></h2><p><strong>异步</strong>指两个或两个以上的对象或事件<strong>不</strong>同时存在或发生（或多个相关事物的发生<strong>无需</strong>等待其前一事物的完成）</p><h2 id="同步JavaScript"><a href="#同步JavaScript" class="headerlink" title="同步JavaScript"></a><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Synchronous">同步JavaScript</a></h2><p>各方都实时（或者尽可能实时）地收取（而且必要的话也处理或者回复）信息的即时沟通方式，即为<strong>同步</strong>。</p><p>电话即为一个日常的例子：人们都倾向于在使用电话时即时地作出回应。</p><p>许多程序指令也是实时的：例如当输入一个算式时，除非编程人员有意为止，否则环境都会立即将结果反馈回来。</p><h2 id="事件队列"><a href="#事件队列" class="headerlink" title="事件队列"></a>事件队列</h2><p>像<code>promise</code>这样的异步操作被放入事件队列中，事件队列在主线程完成处理后运行，这样它们就不会阻止后续JavaScript代码的运行。排队操作将尽快完成，然后将结果返回到JavaScript环境。</p><h2 id="Promises-对比-callbacks"><a href="#Promises-对比-callbacks" class="headerlink" title="Promises 对比 callbacks"></a>Promises 对比 callbacks</h2><p>promises与旧式callbacks有一些相似之处。它们本质上是一个返回的对象，您可以将回调函数附加到该对象上，而不必将回调作为参数传递给另一个函数。</p><p>然而，Promise是专门为异步操作而设计的，与旧式回调相比具有许多优点:</p><ul><li>您可以使用多个then()操作将多个异步操作链接在一起，并将其中一个操作的结果作为输入传递给下一个操作。这种链接方式对回调来说要难得多，会使回调以混乱的“末日金字塔”告终。 (也称为回调地狱)。</li><li>Promise总是严格按照它们放置在事件队列中的顺序调用。</li><li>错误处理要好得多——所有的错误都由块末尾的一个.catch()块处理，而不是在“金字塔”的每一层单独处理。</li></ul><h2 id="异步代码的本质"><a href="#异步代码的本质" class="headerlink" title="异步代码的本质"></a>异步代码的本质</h2><p>让我们研究一个示例，它进一步说明了异步代码的本质，展示了当我们不完全了解代码执行顺序以及将异步代码视为同步代码时可能发生的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log (<span class="hljs-string">&#x27;Starting&#x27;</span>);<br><span class="hljs-keyword">let</span> image;<br><br>fetch(<span class="hljs-string">&#x27;coffee.jpg&#x27;</span>).then(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;It worked :)&#x27;</span>)<br>  <span class="hljs-keyword">return</span> response.blob();<br>&#125;).then(<span class="hljs-function">(<span class="hljs-params">myBlob</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> objectURL = URL.createObjectURL(myBlob);<br>  image = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;img&#x27;</span>);<br>  image.src = objectURL;<br>  <span class="hljs-built_in">document</span>.body.appendChild(image);<br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;There has been a problem with your fetch operation: &#x27;</span> + error.message);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log (<span class="hljs-string">&#x27;All done!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>浏览器将会执行代码，看见第一个<code>console.log()</code> 输出<code>Starting</code> ，然后创建<code>image</code>变量。</p><p>然后，它将移动到下一行并开始执行<code>fetch()</code>块，但是，因为<code>fetch()</code>是异步执行的，没有阻塞，所以在<code>promise</code>相关代码之后程序继续执行，从而到达最后的<code>console.log()</code>语句<code>All done!</code>并将其输出到控制台。</p><p>只有当<code>fetch()</code> 块完成运行返回结果给<code>.then()</code>，我们才最后看到第二个<code>console.log()</code>消息 <code>It worked ;)</code>。所以 这些消息可能以和你预期不同的顺序出现：</p><ul><li>Starting</li><li>All done!</li><li>It worked :)</li></ul><p>如果你感到疑惑，考虑下面这个小例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;registering click handler&quot;</span>);<br><br>button.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;get click&quot;</span>);<br>&#125;);<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;all done&quot;</span>);<br></code></pre></td></tr></table></figure><p>这在行为上非常相似——第一个和第三个<code>console.log()</code>消息将立即显示，但是第二个消息将被阻塞，直到有人单击鼠标按钮。前面的示例以相同的方式工作，只是在这种情况下，第二个消息在<code>promise</code>链上被阻塞，直到获取资源后再显示在屏幕上，而不是单击。</p><p>要查看实际情况，并将第三个<code>console.log()</code>调用更改为以下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log (<span class="hljs-string">&#x27;All done! &#x27;</span> + image.src + <span class="hljs-string">&#x27;displayed.&#x27;</span>);<br></code></pre></td></tr></table></figure><p>此时控制台将会报错，而不会显示第三个 console.log 的信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">TypeError</span>: image is <span class="hljs-literal">undefined</span>; can<span class="hljs-string">&#x27;t access its &quot;src&quot; property</span><br></code></pre></td></tr></table></figure><p>这是因为：浏览器运行第三个console.log()的时候，fetch() 语句块还没有完成，因此image还没有赋值。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>JavaScript</code>是一种同步的、阻塞的、单线程的语言，在这种语言中，一次只能执行一个操作。</p><p>但web浏览器定义了函数和API，允许我们当某些事件发生时不是按照同步方式，而是异步地调用函数(比如，时间的推移，用户通过鼠标的交互，或者获取网络数据)。</p><p>这意味着您的代码可以同时做几件事情，而不需要停止或阻塞主线程。</p><h3 id="异步还是同步执行代码，取决于我们要做什么"><a href="#异步还是同步执行代码，取决于我们要做什么" class="headerlink" title="异步还是同步执行代码，取决于我们要做什么"></a>异步还是同步执行代码，取决于我们要做什么</h3><ul><li><p>同步-如果我们希望事情能够立即加载并发生。例如，当将一些用户定义的样式应用到一个页面时，您希望这些样式能够尽快被应用。</p></li><li><p>异步-如果我们正在运行一个需要时间的操作，比如查询数据库并使用结果填充模板，那么最好将该操作从主线程中移开使用异步完成任务。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git rebase 用法</title>
    <link href="/20211202/git-rebase-%E7%94%A8%E6%B3%95/"/>
    <url>/20211202/git-rebase-%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><a href="https://zhuanlan.zhihu.com/p/34197548">参考自此文章</a></p><p>以前提交代码一直是用命令行提交的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// 一把梭</span><br>git pull<br>git add .<br>git commit -m <span class="hljs-string">&#x27;xxxxxx&#x27;</span><br>git push<br></code></pre></td></tr></table></figure><p>在多人开发项目下，这样提交的话会有如下效果:</p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-3d42d72b334fc7c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/594/format/webp" alt="显示效果"></p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-d0fb965ce204e6f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/222/format/webp" alt="显示效果"></p><p>当很多人都把自己的分支合到主分支的时候，这样会显得主线很乱而且还会有自动生成的提交信息</p><p><strong>所以提倡用<code>git rebase</code></strong></p><h2 id="使用-rebase-和-merge-的基本原则"><a href="#使用-rebase-和-merge-的基本原则" class="headerlink" title="使用 rebase 和 merge 的基本原则"></a>使用 rebase 和 merge 的基本原则</h2><ol><li>下游分支更新上游分支内容的时候使用 rebase</li><li>上游分支合并下游分支内容的时候使用 merge</li><li>更新当前分支的内容时一定要使用 –rebase 参数</li></ol><p>例如现有上游分支 master，基于 master 分支拉出来一个开发分支 dev，在 dev 上开发了一段时间后要把 master 分支提交的新内容更新到 dev 分支，此时切换到 dev 分支，使用 <code>git rebase master</code></p><p>等 dev 分支开发完成了之后，要合并到上游分支 master 上的时候，切换到 master 分支，使用 <code>git merge dev</code></p><h2 id="实际开发中遇到操作"><a href="#实际开发中遇到操作" class="headerlink" title="实际开发中遇到操作"></a>实际开发中遇到操作</h2><p>当你和其他人在同一个分支开发时，在你提交的时候发现有人已经提交了一些东西上去了，你可以这样操作：</p><ol><li><p><code>git pull --rebase</code></p></li><li><p><code>git push</code></p></li></ol><p>你也可以使用vscode上下载的git插件来操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-ecca9bb5bd96dc14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vscode操作"></p><p>然后再push上去。</p>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create-react-app 搭建项目踩坑记录</title>
    <link href="/20211129/create-react-app-%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/20211129/create-react-app-%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="中文说明"><a href="#中文说明" class="headerlink" title="中文说明"></a>中文说明</h1><h2 id="搭建前端开发环境笔记"><a href="#搭建前端开发环境笔记" class="headerlink" title="搭建前端开发环境笔记"></a>搭建前端开发环境笔记</h2><p>由<code>npx create-react-app articles_published_system</code>创建的项目</p><p>后来漏掉了<code>typescript</code>支持，原本可以由命令<code>npx create-react-app articles_published_system --template typescript</code>可以直接创建支持ts的应用</p><p>后续要将ts添加到已有项目中，用以下命令：</p><p><code>npm install --save typescript @types/node @types/react @types/react-dom @types/jest</code></p><p>项目中配置<code>sass</code>:</p><ol><li><p>执行<code>yarn add node-sass</code>下载包（按理说执行<code>npm install node-sass --save</code>也应该有用，但是我这边报错了）。</p><p> 报错如下：</p><p> <img src="https://upload-images.jianshu.io/upload_images/13931286-44bf5ea859ce44fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/672/format/webp" alt="npm安装sass报错"></p><p> 我的vscode和node版本都是最新的</p><p> 建议大家用<code>yarn</code>来安装项目</p><p> <strong>发现启动后sass会报错</strong></p><p> 解决办法：sass指定版本为<code>^1.43.5</code>，postcss-pxtorem为<code>^5.1.1</code>，不要安装node-sass了</p><p> 前端生态配置仍然复杂</p></li><li><p>将样式文件后缀改为<code>.scss</code>并在tsx或者js文件中引入，项目会自动编译。</p></li></ol><p>为了实现自适应，给项目配置postcss-pxtorem</p><ol><li><p>执行<code>yarn add lib-flexible postcss-pxtorem</code></p></li><li><p>在应用入口引入<code>import &#39;lib-flexible&#39;</code></p></li><li><p>执行<code>npm run eject</code>可以打开<code>create-react-app</code>应用的配置文件</p></li><li><p>在<code>config/webpack.config.js</code>文件中配置postcss，位置及方法如下图：</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/13931286-da7732a5f0bf175d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/554/format/webp" alt="引入postcss"></p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-7f538e5227508fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/630/format/webp" alt="配置postcss"></p><p>UI库使用antdesign</p><ol><li><p>安装antd，<code>yarn add antd</code></p></li><li><p>在App.css 中导入样式<code>@import &#39;~antd/dist/antd.css&#39;</code>，然后在组件中引入相应的ui组件就可以用了。</p></li></ol><hr><p>完~</p>]]></content>
    
    
    <categories>
      
      <category>技术类-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近在忙什么</title>
    <link href="/20211118/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%BF%99%E4%BB%80%E4%B9%88/"/>
    <url>/20211118/%E6%9C%80%E8%BF%91%E5%9C%A8%E5%BF%99%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>最近在做一个个人的全栈项目</p><p>前端技术栈是：Vite+Vue3+TypeScript+Scss</p><p>后端技术栈是：NodeJs+Express+MySQL</p><p>已经上线一部分功能,部署在阿里云上了</p><p>目前没啥功能。后续会慢慢完善优化</p><p>地址在：<a href="http://www.hjzouhualu.com/">www.hjzouhualu.com</a></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js学习记录</title>
    <link href="/20211031/Node-js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/20211031/Node-js%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="使用-exports-从-Node-js-文件中公开功能"><a href="#使用-exports-从-Node-js-文件中公开功能" class="headerlink" title="使用 exports 从 Node.js 文件中公开功能"></a>使用 exports 从 Node.js 文件中公开功能</h2><p>两种方式：</p><ol><li><p>第一种方式是将对象赋值给 module.exports（这是模块系统提供的对象），这会使文件只导出该对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>  <span class="hljs-attr">model</span>: <span class="hljs-string">&quot;Fiesta&quot;</span>,<br>&#125;;<br><br><span class="hljs-built_in">module</span>.exports = car;<br><br><span class="hljs-comment">//在另一个文件中</span><br><br><span class="hljs-keyword">const</span> car = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./car&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>第二种方式是将要导出的对象添加为 exports 的属性。这种方式可以导出多个对象、函数或数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>  <span class="hljs-attr">model</span>: <span class="hljs-string">&quot;Fiesta&quot;</span>,<br>&#125;;<br><br><span class="hljs-built_in">exports</span>.car = car;<br></code></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>  <span class="hljs-attr">model</span>: <span class="hljs-string">&quot;Fiesta&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在另一个文件中，则通过引用导入的属性来使用它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./items&quot;</span>);<br>items.car;<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> car = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./items&quot;</span>).car;<br></code></pre></td></tr></table></figure></li></ol><p>module.exports 和 export 之间有什么区别？</p><p>前者公开了它指向的对象。 后者公开了它指向的对象的属性。</p><h2 id="package-json-指南"><a href="#package-json-指南" class="headerlink" title="package.json 指南"></a>package.json 指南</h2><p><code>package.json</code> 文件是项目的清单。 它可以做很多完全互不相关的事情。 例如，它是用于工具的配置中心。 它也是 <code>npm</code> 和 <code>yarn</code> 存储所有已安装软件包的名称和版本的地方。</p><p>对于应用程序，<code>package.json</code> 文件中的内容没有固定的要求。 唯一的要求是必须遵守 <code>JSON 格式</code>，否则，尝试以编程的方式访问其属性的程序则无法读取它。</p><p>例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;test-project&quot;</span>,<br>  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;A Vue.js project&quot;</span>,<br>  <span class="hljs-attr">&quot;main&quot;</span>: <span class="hljs-string">&quot;src/main.js&quot;</span>,<br>  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;</span>,<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;npm run dev&quot;</span>,<br>    <span class="hljs-attr">&quot;unit&quot;</span>: <span class="hljs-string">&quot;jest --config test/unit/jest.conf.js --coverage&quot;</span>,<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;npm run unit&quot;</span>,<br>    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;eslint --ext .js,.vue src test/unit&quot;</span>,<br>    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.5.2&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;autoprefixer&quot;</span>: <span class="hljs-string">&quot;^7.1.2&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-core&quot;</span>: <span class="hljs-string">&quot;^6.22.1&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-eslint&quot;</span>: <span class="hljs-string">&quot;^8.2.1&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-helper-vue-jsx-merge-props&quot;</span>: <span class="hljs-string">&quot;^2.0.3&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-jest&quot;</span>: <span class="hljs-string">&quot;^21.0.2&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-loader&quot;</span>: <span class="hljs-string">&quot;^7.1.1&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-plugin-dynamic-import-node&quot;</span>: <span class="hljs-string">&quot;^1.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-plugin-syntax-jsx&quot;</span>: <span class="hljs-string">&quot;^6.18.0&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-plugin-transform-es2015-modules-commonjs&quot;</span>: <span class="hljs-string">&quot;^6.26.0&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-plugin-transform-runtime&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-plugin-transform-vue-jsx&quot;</span>: <span class="hljs-string">&quot;^3.5.0&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-preset-env&quot;</span>: <span class="hljs-string">&quot;^1.3.2&quot;</span>,<br>    <span class="hljs-attr">&quot;babel-preset-stage-2&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>,<br>    <span class="hljs-attr">&quot;chalk&quot;</span>: <span class="hljs-string">&quot;^2.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;copy-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^4.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;css-loader&quot;</span>: <span class="hljs-string">&quot;^0.28.0&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint&quot;</span>: <span class="hljs-string">&quot;^4.15.0&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint-config-airbnb-base&quot;</span>: <span class="hljs-string">&quot;^11.3.0&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint-friendly-formatter&quot;</span>: <span class="hljs-string">&quot;^3.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint-import-resolver-webpack&quot;</span>: <span class="hljs-string">&quot;^0.8.3&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint-loader&quot;</span>: <span class="hljs-string">&quot;^1.7.1&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint-plugin-import&quot;</span>: <span class="hljs-string">&quot;^2.7.0&quot;</span>,<br>    <span class="hljs-attr">&quot;eslint-plugin-vue&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;extract-text-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^3.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;file-loader&quot;</span>: <span class="hljs-string">&quot;^1.1.4&quot;</span>,<br>    <span class="hljs-attr">&quot;friendly-errors-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^1.6.1&quot;</span>,<br>    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^2.30.1&quot;</span>,<br>    <span class="hljs-attr">&quot;jest&quot;</span>: <span class="hljs-string">&quot;^22.0.4&quot;</span>,<br>    <span class="hljs-attr">&quot;jest-serializer-vue&quot;</span>: <span class="hljs-string">&quot;^0.3.0&quot;</span>,<br>    <span class="hljs-attr">&quot;node-notifier&quot;</span>: <span class="hljs-string">&quot;^5.1.2&quot;</span>,<br>    <span class="hljs-attr">&quot;optimize-css-assets-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^3.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;ora&quot;</span>: <span class="hljs-string">&quot;^1.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;portfinder&quot;</span>: <span class="hljs-string">&quot;^1.0.13&quot;</span>,<br>    <span class="hljs-attr">&quot;postcss-import&quot;</span>: <span class="hljs-string">&quot;^11.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;postcss-loader&quot;</span>: <span class="hljs-string">&quot;^2.0.8&quot;</span>,<br>    <span class="hljs-attr">&quot;postcss-url&quot;</span>: <span class="hljs-string">&quot;^7.2.1&quot;</span>,<br>    <span class="hljs-attr">&quot;rimraf&quot;</span>: <span class="hljs-string">&quot;^2.6.0&quot;</span>,<br>    <span class="hljs-attr">&quot;semver&quot;</span>: <span class="hljs-string">&quot;^5.3.0&quot;</span>,<br>    <span class="hljs-attr">&quot;shelljs&quot;</span>: <span class="hljs-string">&quot;^0.7.6&quot;</span>,<br>    <span class="hljs-attr">&quot;uglifyjs-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^1.1.1&quot;</span>,<br>    <span class="hljs-attr">&quot;url-loader&quot;</span>: <span class="hljs-string">&quot;^0.5.8&quot;</span>,<br>    <span class="hljs-attr">&quot;vue-jest&quot;</span>: <span class="hljs-string">&quot;^1.0.2&quot;</span>,<br>    <span class="hljs-attr">&quot;vue-loader&quot;</span>: <span class="hljs-string">&quot;^13.3.0&quot;</span>,<br>    <span class="hljs-attr">&quot;vue-style-loader&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,<br>    <span class="hljs-attr">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.5.2&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^3.6.0&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-bundle-analyzer&quot;</span>: <span class="hljs-string">&quot;^2.9.0&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^2.9.1&quot;</span>,<br>    <span class="hljs-attr">&quot;webpack-merge&quot;</span>: <span class="hljs-string">&quot;^4.1.0&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;engines&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;node&quot;</span>: <span class="hljs-string">&quot;&gt;= 6.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;npm&quot;</span>: <span class="hljs-string">&quot;&gt;= 3.0.0&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;browserslist&quot;</span>: [<span class="hljs-string">&quot;&gt; 1%&quot;</span>, <span class="hljs-string">&quot;last 2 versions&quot;</span>, <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有很多东西：</p><ul><li>version 表明了当前的版本。</li><li>name 设置了应用程序/软件包的名称。</li><li>description 是应用程序/软件包的简短描述。</li><li>main 设置了应用程序的入口点。</li><li>private 如果设置为 true，则可以防止应用程序/软件包被意外地发布到 npm。</li><li>scripts 定义了一组可以运行的 node 脚本。</li><li>dependencies 设置了作为依赖安装的 npm 软件包的列表。</li><li>devDependencies 设置了作为开发依赖安装的 npm 软件包的列表。</li><li>engines 设置了此软件包/应用程序在哪个版本的 Node.js 上运行。</li><li>browserslist 用于告知要支持哪些浏览器（及其版本）。<br>以上所有的这些属性都可被 npm 或其他工具使用。</li></ul><h2 id="package-lock-json-文件"><a href="#package-lock-json-文件" class="headerlink" title="package-lock.json 文件"></a>package-lock.json 文件</h2><p>该文件旨在跟踪被安装的每个软件包的确切版本，以便产品可以以相同的方式被 100％ 复制（即使软件包的维护者更新了软件包）。</p><h2 id="npm-依赖与开发依赖"><a href="#npm-依赖与开发依赖" class="headerlink" title="npm 依赖与开发依赖"></a>npm 依赖与开发依赖</h2><p>当使用 <code>npm install &lt;package-name&gt;</code> 安装 npm 软件包时，是将其安装为依赖项。</p><p>该软件包会被自动地列出在 <code>package.json</code> 文件中的 <code>dependencies</code> 列表下（在 npm 5 之前：必须手动指定 <code>--save</code>）。</p><p>当添加了 <code>-D</code> 或 <code>--save-dev</code> 标志时，则会将其安装为开发依赖项（会被添加到 <code>devDependencies</code> 列表）。</p><p>开发依赖是仅用于开发的程序包，在生产环境中并不需要。 例如测试的软件包、webpack 或 Babel。</p><p>当投入生产环境时，如果输入 <code>npm install</code> 且该文件夹包含 <code>package.json</code> 文件时，则会安装它们，因为 npm 会假定这是开发部署。</p><h2 id="Node-js-包运行器-npxs"><a href="#Node-js-包运行器-npxs" class="headerlink" title="Node.js 包运行器 npxs"></a>Node.js 包运行器 npxs</h2><ul><li><p>轻松地运行本地命令</p><p>Node.js 开发者过去通常将大多数可执行命令发布为全局的软件包，以使它们处于路径中且可被立即地执行。</p><p>运行 <code>npx commandname</code> 会自动地在项目的 <code>node_modules</code> 文件夹中找到命令的正确引用，而无需知道确切的路径，也不需要在全局和用户路径中安装软件包。</p></li><li><p>无需安装的命令执行</p><p><code>npx</code> 的另一个重要的特性是，无需先安装命令即可运行命令。</p></li><li><p>使用不同的 Node.js 版本运行代码</p></li><li><p>直接从 URL 运行任意代码片段</p></li></ul><h2 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h2><p>原文链接：<a href="http://nodejs.cn/learn/the-nodejs-event-loop">Node.js 事件循环</a></p><h3 id="一个简单的事件循环的阐释"><a href="#一个简单的事件循环的阐释" class="headerlink" title="一个简单的事件循环的阐释"></a>一个简单的事件循环的阐释</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bar = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;bar&quot;</span>);<br><br><span class="hljs-keyword">const</span> baz = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;baz&quot;</span>);<br><br><span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;foo&quot;</span>);<br>  bar();<br>  baz();<br>&#125;;<br><br>foo();<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// foo</span><br><span class="hljs-comment">// bar</span><br><span class="hljs-comment">// baz</span><br></code></pre></td></tr></table></figure><p>当运行此代码时，会首先调用 foo()。 在 foo() 内部，会首先调用 bar()，然后调用 baz()。</p><p>此时，调用堆栈如下所示：</p><p><img src="http://nodejs.cn/website2/static/270ebeb6dbfa7d613152b71257c72a9e/11a8f/call-stack-first-example.png" alt="调用堆栈"></p><h3 id="入队函数执行"><a href="#入队函数执行" class="headerlink" title="入队函数执行"></a>入队函数执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bar = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;bar&quot;</span>);<br><br><span class="hljs-keyword">const</span> baz = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;baz&quot;</span>);<br><br><span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;foo&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(bar, <span class="hljs-number">0</span>);<br>  baz();<br>&#125;;<br><br>foo();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印输出：</span><br><span class="hljs-comment"> * foo</span><br><span class="hljs-comment"> * baz</span><br><span class="hljs-comment"> * bar</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>当运行此代码时，会首先调用 foo()。 在 foo() 内部，会首先调用 setTimeout，将 bar 作为参数传入，并传入 0 作为定时器指示它尽快运行。 然后调用 baz()。</p><p>调用堆栈如图：<br><img src="http://nodejs.cn/website2/static/be55515b9343074d00b43de88c495331/966a0/call-stack-second-example.png" alt="调用堆栈"></p><p>执行顺序是：<br><img src="http://nodejs.cn/website2/static/585ff3207d814911a7e44d55fbde483b/f96db/execution-order-second-example.png" alt="执行顺序"></p><p>为什么会这样呢？</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>当调用 <code>setTimeout()</code> 时，浏览器或 Node.js 会启动定时器。 <strong>当定时器到期时（在此示例中会立即到期，因为将超时值设为 0），则回调函数会被放入“消息队列”中。</strong></p><p>在消息队列中，用户触发的事件（如单击或键盘事件、或获取响应）也会在此排队，然后代码才有机会对其作出反应。 类似 onLoad 这样的 DOM 事件也如此。</p><p>事件循环会赋予调用堆栈优先级，它首先处理在调用堆栈中找到的所有东西，一旦其中没有任何东西，便开始处理消息队列中的东西。</p><p>我们不必等待诸如 <code>setTimeout</code>、<code>fetch</code>、或其他的函数来完成它们自身的工作，因为它们是由浏览器提供的，并且位于它们自身的线程中。 例如，如果将 setTimeout 的超时设置为 2 秒，但不必等待 2 秒，等待发生在其他地方。</p><h3 id="ES6-作业队列"><a href="#ES6-作业队列" class="headerlink" title="ES6 作业队列"></a>ES6 作业队列</h3><p><code>ECMAScript 2015</code> 引入了作业队列的概念，Promise 使用了该队列（也在 ES6/ES2015 中引入）。 这种方式会尽快地执行异步函数的结果，而不是放在调用堆栈的末尾。</p><p>在当前函数结束之前 resolve 的 Promise 会在当前函数之后被立即执行。</p><p>有个游乐园中过山车的比喻很好：消息队列将你排在队列的后面（在所有其他人的后面），你不得不等待你的回合，而工作队列则是快速通道票，这样你就可以在完成上一次乘车后立即乘坐另一趟车。</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bar = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bar&#x27;</span>)<br><br><span class="hljs-keyword">const</span> baz = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;baz&#x27;</span>)<br><br><span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo&#x27;</span>)<br>  <span class="hljs-built_in">setTimeout</span>(bar, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span><br>    resolve(<span class="hljs-string">&#x27;应该在 baz 之后、bar 之前&#x27;</span>)<br>  ).then(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(resolve))<br>  baz()<br>&#125;<br><br>foo()<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 输出：</span><br><span class="hljs-comment"> *  foo</span><br><span class="hljs-comment"> *  baz</span><br><span class="hljs-comment"> *  应该在 baz 之后、bar 之前</span><br><span class="hljs-comment"> *  bar</span><br><span class="hljs-comment"> * /</span><br></code></pre></td></tr></table></figure><p>这是 Promise（以及基于 promise 构建的 async/await）与通过 setTimeout() 或其他平台 API 的普通的旧异步函数之间的巨大区别。</p><h2 id="了解-process-nextTick"><a href="#了解-process-nextTick" class="headerlink" title="了解 process.nextTick()"></a>了解 process.nextTick()</h2><p>当尝试了解 Node.js 事件循环时，其中一个重要的部分就是 process.nextTick()。</p><p>每当事件循环进行一次完整的行程时，我们都将其称为一个滴答。</p><p>当将一个函数传给 process.nextTick() 时，则指示引擎在当前操作结束（在下一个事件循环滴答开始之前）时调用此函数</p><p>事件循环正在忙于处理当前的函数代码。</p><p>当该操作结束时，JS 引擎会运行在该操作期间传给 nextTick 调用的所有函数。</p><p>这是可以告诉 JS 引擎异步地（在当前函数之后）处理函数的方式，但是尽快执行而不是将其排入队列。</p><p>调用 setTimeout(() =&gt; {}, 0) 会在下一个滴答结束时执行该函数，比使用 nextTick()（其会优先执行该调用并在下一个滴答开始之前执行该函数）晚得多。</p><p><strong>也就是说在当前调用堆栈的执行完成后就开始执行<code>process.nextTick()</code>里面的函数</strong></p><h2 id="了解-setImmediate"><a href="#了解-setImmediate" class="headerlink" title="了解 setImmediate()"></a>了解 setImmediate()</h2><p>作为 setImmediate() 参数传入的任何函数都是在事件循环的下一个迭代中执行的回调。</p><h3 id="setImmediate-与-setTimeout-gt-0-（传入-0-毫秒的超时）、process-nextTick-有何不同？"><a href="#setImmediate-与-setTimeout-gt-0-（传入-0-毫秒的超时）、process-nextTick-有何不同？" class="headerlink" title="setImmediate() 与 setTimeout(() =&gt; {}, 0)（传入 0 毫秒的超时）、process.nextTick() 有何不同？"></a>setImmediate() 与 setTimeout(() =&gt; {}, 0)（传入 0 毫秒的超时）、process.nextTick() 有何不同？</h3><p>传给 process.nextTick() 的函数会在事件循环的当前迭代中（当前操作结束之后）被执行。 这意味着它会始终在 setTimeout 和 setImmediate 之前执行。</p><p>延迟 0 毫秒的 setTimeout() 回调与 setImmediate() 非常相似。 执行顺序取决于各种因素，但是它们都会在事件循环的下一个迭代中运行。</p>]]></content>
    
    
    <categories>
      
      <category>技术类-Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>call,apply和bind</title>
    <link href="/20211021/call-apply%E5%92%8Cbind/"/>
    <url>/20211021/call-apply%E5%92%8Cbind/</url>
    
    <content type="html"><![CDATA[<p><code>call</code>，<code>apply</code>和<code>bind</code>都是用来改变this的指向，但是他们在使用和功能上各有区别。</p><h1 id="call-方法"><a href="#call-方法" class="headerlink" title="call() 方法"></a>call() 方法</h1><h2 id="call-方法的作用"><a href="#call-方法的作用" class="headerlink" title="call() 方法的作用"></a>call() 方法的作用</h2><p>call() 方法的作用：可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。</p><p>call() 方法的另一个应用：<strong>可以实现继承</strong>。之所以能实现继承，其实是利用了上面的作用。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">fn1.call(想要将<span class="hljs-built_in">this</span>指向哪里, 函数实参<span class="hljs-number">1</span>, 函数实参<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>备注：第一个参数中，如果不需要改变 this 指向，则传 null。</p><h2 id="call-方法举例"><a href="#call-方法举例" class="headerlink" title="call() 方法举例"></a>call() 方法举例</h2><p>举例 1、通过 call() 调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj1 = &#123;<br>    <span class="hljs-attr">nickName</span>: <span class="hljs-string">&#x27;走花鹿&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.nickName);<br>&#125;<br>fn1.call(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// this的指向并没有被改变，此时相当于 fn1();</span><br></code></pre></td></tr></table></figure><p>上方代码的打印结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span><br><span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>上面的代码，跟普通的函数调用 <code>fn1()</code> 没有区别。</p><p>举例 2、通过 call() 改变 this 指向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">nickName</span>: <span class="hljs-string">&#x27;走花鹿&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.nickName);<br>    <span class="hljs-built_in">console</span>.log(a + b);<br>&#125;<br><br>fn1.call(obj1, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 先将 this 指向 obj1，然后执行 fn1() 函数</span><br></code></pre></td></tr></table></figure><p>上方代码的打印结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">obj1<br>走花鹿<br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>举例 3、通过 call() 实现继承：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 给 Father 增加 name 和 age 属性</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params">myName, myAge</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = myName;<br>    <span class="hljs-built_in">this</span>.age = myAge;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params">myName, myAge</span>) </span>&#123;<br>    <span class="hljs-comment">// 【下面这一行，重要代码】</span><br>    <span class="hljs-comment">// 通过这一步，将 father 里面的 this 修改为 Son 里面的 this；另外，给 Son 加上相应的参数，让 Son 自动拥有 Father 里的属性。最终实现继承</span><br>    Father.call(<span class="hljs-built_in">this</span>, myName, myAge);<br>&#125;<br><br><span class="hljs-keyword">const</span> son1 = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;走花鹿&#x27;</span>, <span class="hljs-number">26</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(son1));<br></code></pre></td></tr></table></figure><p>上方代码中，通过 call() 方法，让 Son 继承了 Father 里面的 name 和 age 属性。</p><p>打印结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;myName&quot;</span>:<span class="hljs-string">&quot;走花鹿&quot;</span>,<span class="hljs-attr">&quot;myAge&quot;</span>:<span class="hljs-number">26</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply() 方法"></a>apply() 方法</h1><h2 id="apply-方法的作用"><a href="#apply-方法的作用" class="headerlink" title="apply() 方法的作用"></a>apply() 方法的作用</h2><p>apply() 方法的作用：可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。这一点，和 call()类似。</p><p>apply() 方法的应用： 由于 apply()需要传递数组，所以它有一些巧妙应用，稍后看接下来的应用举例就知道了。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">fn1.apply(想要将<span class="hljs-built_in">this</span>指向哪里, [函数实参<span class="hljs-number">1</span>, 函数实参<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>备注：第一个参数中，如果不需要改变 this 指向，则传 null。</p><p>到这里可以看出， <strong>call() 和 apply() 方法的作用是相同的。唯一的区别在于，apply() 里面传入的实参，必须是数组（或者维数组）。</strong></p><h2 id="apply-方法举例"><a href="#apply-方法举例" class="headerlink" title="apply() 方法举例"></a>apply() 方法举例</h2><p>举例、通过 apply() 改变 this 指向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">nickName</span>: <span class="hljs-string">&#x27;走花鹿&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.nickName);<br>    <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br><br>fn1.apply(obj1, [<span class="hljs-string">&#x27;hello&#x27;</span>]); <span class="hljs-comment">// 先将 this 指向 obj1，然后执行 fn1() 函数</span><br></code></pre></td></tr></table></figure><p>注意，上方代码中，call() 里面传实参时，需要以数组的形式。即便是传一个实参，也需要传数组。</p><p>打印结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">obj1<br>走花鹿<br>hello<br></code></pre></td></tr></table></figure><h2 id="apply-方法的巧妙应用：求数组的最大值"><a href="#apply-方法的巧妙应用：求数组的最大值" class="headerlink" title="apply() 方法的巧妙应用：求数组的最大值"></a>apply() 方法的巧妙应用：求数组的最大值</h2><p>我们知道，如果想要求数组中元素的最大值的时候，数组本身是没有自带方法的。那怎么办呢？</p><p>虽然数组里没有获取最大值的方法，但是数值里面有 <code>Math.max(数字1，数字2，数字3)</code> 方法，可以获取多个数值中的最大值。 另外，由于 apply() 方法在传递实参时，必须要以数组的形式，所以我们可以 通过 Math.max() 和 apply() 曲线救国。</p><p>举例：求数组中多个元素的最大值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>];<br><br><span class="hljs-comment">// 下面这一行代码的目的，无需改变 this 指向，所以：第一个参数填 null，或者填 Math，或者填 this 都可以。严格模式中，不让填null。</span><br><span class="hljs-keyword">const</span> maxValue = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>, arr1); <span class="hljs-comment">// 求数组 arr1 中元素的最大值</span><br><span class="hljs-built_in">console</span>.log(maxValue);<br><br><span class="hljs-keyword">const</span> minValue = <span class="hljs-built_in">Math</span>.min.apply(<span class="hljs-built_in">Math</span>, arr1); <span class="hljs-comment">// 求数组 arr1 中元素的最小值</span><br><span class="hljs-built_in">console</span>.log(minValue);<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">10</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind() 方法"></a>bind() 方法</h1><h2 id="bind-方法的作用"><a href="#bind-方法的作用" class="headerlink" title="bind() 方法的作用"></a>bind() 方法的作用</h2><p>bind() 方法<strong>不会调用函数</strong>，但是可以改变函数内部的 this 指向。</p><p>把call()、apply()、bind()这三个方法做一下对比，你会发现：实际开发中， bind() 方法使用得最为频繁。如果有些函数，我们不需要立即调用，但是又想改变这个函数内部的this指向，此时用 bind() 是最为合适的。</p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">新函数 = fn1.bind(想要将<span class="hljs-built_in">this</span>指向哪里, 函数实参<span class="hljs-number">1</span>, 函数实参<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><p>第一个参数：在 fn1 函数运行时，指定 fn1 函数的this 指向。如果不需要改变 this 指向，则传 null。</p></li><li><p>其他参数：fn1 函数的实参。</p></li></ul><p>解释：它不会调用 fn1 函数，但会返回 由指定this 和指定实参的原函数拷贝。可以看出， bind() 方法是有返回值的。</p>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array数组的一些发现</title>
    <link href="/20211020/Array%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%91%E7%8E%B0/"/>
    <url>/20211020/Array%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%91%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>今天对一些元素都是纯数字的数组做<code>forEach</code>遍历操作，发现无法改变原数组，查找了一些资料发现，<code>forEach</code>只能处理数组中的引用类型，元素为基础类型的需要另外的写法。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr2 = [&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;]<br><br><span class="hljs-comment">// 元素为基础类型number，原数组不变</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    item += <span class="hljs-number">1</span><br>&#125;)<br><br><span class="hljs-comment">// 这种写法可行</span><br>arr1.forEach(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    arr1[index] += <span class="hljs-number">1</span><br>&#125;)<br><br><span class="hljs-comment">// 元素为引用类型的，原数组会改变</span><br>arr2.forEach(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    item.a = <span class="hljs-number">66</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(arr1);<br><span class="hljs-built_in">console</span>.log(arr2);<br></code></pre></td></tr></table></figure><p>这主要是和计算机的堆栈有关。基础类型是存储在栈中，<code>forEach</code>中得到item也是存储于栈中，所以它就和数组中的元素毫无关系了；而对象是存储于堆中，遍历的时候item虽然在栈中但是它的指针会指向堆中的位置，所以可以直接修改原数组。</p>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript事件循环</title>
    <link href="/20211014/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <url>/20211014/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>这一篇讲的也特别清楚，建议看看：<a href="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制</a></p><h2 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h2><p><code>JavaScript</code> 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一时间只能做一件事</p><p>为什么要这么设计，跟<code>JavaScript</code>的应用场景有关</p><p><code>JavaScript</code> 初期作为一门浏览器脚本语言，通常用于操作 <code>DOM</code> ，如果是多线程，一个线程进行了删除 <code>DOM</code> ，另一个添加 <code>DOM</code>，此时浏览器该如何处理？</p><p>为了解决单线程运行阻塞问题，<code>JavaScript</code>用到了计算机系统的一种运行机制，这种机制就叫做事件循环（Event Loop）</p><h4 id="事件循环（Event-Loop）"><a href="#事件循环（Event-Loop）" class="headerlink" title="事件循环（Event Loop）"></a>事件循环（Event Loop）</h4><p>在<code>JavaScript</code>中，所有的任务都可以分为</p><ul><li>同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行</li><li>异步任务：异步执行的任务，比如<code>ajax</code>网络请求，<code>setTimeout</code>定时函数等</li></ul><p>同步任务与异步任务的运行流程图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-a4cefb0d8aa74774?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>从上面我们可以看到，同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。上述过程的不断重复就是事件循环</p><h2 id="二、宏任务与微任务"><a href="#二、宏任务与微任务" class="headerlink" title="二、宏任务与微任务"></a>二、宏任务与微任务</h2><p>如果将任务划分为同步任务和异步任务并不是那么的准确，举个例子：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;new Promise&#x27;</span>)<br>    resolve()<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;then&#x27;</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>如果按照上面流程图来分析代码，我们会得到下面的执行步骤：</p><ul><li><code>console.log(1)</code>，同步任务，主线程中执行</li><li><code>setTimeout()</code> ，异步任务，放到 <code>Event Table</code>，0 毫秒后<code>console.log(2)</code>回调推入 <code>Event Queue</code> 中</li><li><code>new Promise</code> ，同步任务，主线程直接执行</li><li><code>.then</code> ，异步任务，放到 <code>Event Table</code></li><li><code>console.log(3)</code>，同步任务，主线程执行</li></ul><p>所以按照分析，它的结果应该是 <code>1</code> =&gt; <code>&#39;new Promise&#39;</code> =&gt; <code>3</code> =&gt; <code>2</code> =&gt; <code>&#39;then&#39;</code></p><p>但是实际结果是：<code>1</code>=&gt;<code>&#39;new Promise&#39;</code>=&gt; <code>3</code> =&gt; <code>&#39;then&#39;</code> =&gt; <code>2</code></p><p>出现分歧的原因在于异步任务执行顺序，事件队列其实是一个“先进先出”的数据结构，排在前面的事件会优先被主线程读取</p><p>例子中 <code>setTimeout</code>回调事件是先进入队列中的，按理说应该先于 <code>.then</code> 中的执行，但是结果却偏偏相反</p><p>原因在于异步任务还可以细分为微任务与宏任务</p><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h3><p>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p><p>常见的微任务有：</p><ul><li>Promise.then</li><li>MutaionObserver</li><li>Object.observe（已废弃；Proxy 对象替代）</li><li>process.nextTick（Node.js）</li></ul><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h3><p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合</p><p>常见的宏任务有：</p><ul><li>script (可以理解为外层同步代码)</li><li>setTimeout/setInterval</li><li>UI rendering/UI事件</li><li>postMessage、MessageChannel</li><li>setImmediate、I/O（Node.js）</li></ul><p>这时候，事件循环，宏任务，微任务的关系如图所示</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/gH31uF9VIibSNwS2EBDtHnxMysjAib2yvIh75NUHZic4J4n5mPSe5jcMcWtsO0LuhRDuqdHVWicqejmPAI8NLLjuKw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>按照这个流程，它的执行机制是：</p><ul><li>执行一个宏任务，如果遇到微任务就将它放到微任务的事件队列中</li><li>当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务依次执行完</li></ul><p>回到上面的题目</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;new Promise&#x27;</span>)<br>    resolve()<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;then&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>流程如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 遇到 console.log(<span class="hljs-number">1</span>) ，直接打印 <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span> 遇到定时器，属于新的宏任务，留着后面执行<br><span class="hljs-regexp">//</span> 遇到 new Promise，这个是直接执行的，打印 <span class="hljs-string">&#x27;new Promise&#x27;</span><br><span class="hljs-regexp">//</span> .then 属于微任务，放入微任务队列，后面再执行<br><span class="hljs-regexp">//</span> 遇到 console.log(<span class="hljs-number">3</span>) 直接打印 <span class="hljs-number">3</span><br><span class="hljs-regexp">//</span> 好了本轮宏任务执行完毕，现在去微任务列表查看是否有微任务，发现 .then 的回调，执行它，打印 <span class="hljs-string">&#x27;then&#x27;</span><br><span class="hljs-regexp">//</span> 当一次宏任务执行完，再去执行新的宏任务，这里就剩一个定时器的宏任务了，执行它，打印 <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="三、async与await"><a href="#三、async与await" class="headerlink" title="三、async与await"></a>三、async与await</h2><p><code>async</code> 是异步的意思，<code>await</code>则可以理解为等待</p><p>放到一起可以理解<code>async</code>就是用来声明一个异步方法，而 <code>await</code>是用来等待异步方法执行</p><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><p><code>async</code>函数返回一个<code>promise</code>对象，下面两种方法是等效的</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">Promise.resolve(&#x27;TEST&#x27;)</span>;<br>&#125;<br><br>// asyncF <span class="hljs-keyword">is</span> equivalent to f!<br>async <span class="hljs-keyword">function</span> <span class="hljs-title">asyncF</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">&#x27;TEST&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise</code>对象，返回该对象的结果。如果不是 <code>Promise</code>对象，就直接返回对应的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 等同于</span><br>    <span class="hljs-comment">// return 123</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-number">123</span><br>&#125;<br>f().then(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(v)) <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p>不管<code>await</code>后面跟着的是什么，<code>await</code>都会阻塞后面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">await</span> fn2()<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>) <span class="hljs-comment">// 阻塞</span><br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fn2&#x27;</span>)<br>&#125;<br><br>fn1()<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>上面的例子中，<code>await</code> 会阻塞下面的代码（即加入微任务队列），先执行 <code>async</code>外面的同步代码，同步代码执行完，再回到 <code>async</code> 函数中，再执行之前阻塞的代码</p><p>所以上述输出结果为：<code>1</code>，<code>fn2</code>，<code>3</code>，<code>2</code></p><h2 id="四、流程分析"><a href="#四、流程分析" class="headerlink" title="四、流程分析"></a>四、流程分析</h2><p>通过对上面的了解，我们对<code>JavaScript</code>对各种场景的执行顺序有了大致的了解</p><p>这里直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>)<br>    <span class="hljs-keyword">await</span> async2()<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;settimeout&#x27;</span>)<br>&#125;)<br>async1()<br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>    resolve()<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>&#125;)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>)<br></code></pre></td></tr></table></figure><p>分析过程：</p><ol><li>执行整段代码，遇到 <code>console.log(&#39;script start&#39;)</code> 直接打印结果，输出 <code>script start</code></li><li>遇到定时器了，它是宏任务，先放着不执行</li><li>遇到 <code>async1()</code>，执行 <code>async1</code> 函数，先打印 <code>async1 start</code>，下面遇到<code>await</code>怎么办？先执行 <code>async2</code>，打印 <code>async2</code>，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码</li><li>跳到 <code>new Promise</code> 这里，直接执行，打印 <code>promise1</code>，下面遇到 <code>.then()</code>，它是微任务，放到微任务列表等待执行</li><li>最后一行直接打印 <code>script end</code>，现在同步代码执行完了，开始执行微任务，即 <code>await</code>下面的代码，打印 <code>async1 end</code></li><li>继续执行下一个微任务，即执行 <code>then</code> 的回调，打印 <code>promise2</code></li><li>上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 <code>settimeout</code></li></ol><p>所以最后的结果是：<code>script start</code>、<code>async1 start</code>、<code>async2</code>、<code>promise1</code>、<code>script end</code>、<code>async1 end</code>、<code>promise2</code>、<code>settimeout</code></p>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解javascript之typeof和instanceof</title>
    <link href="/20211013/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript%E4%B9%8Btypeof%E5%92%8Cinstanceof/"/>
    <url>/20211013/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript%E4%B9%8Btypeof%E5%92%8Cinstanceof/</url>
    
    <content type="html"><![CDATA[<h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><p>typeof方法<strong>返回一个字符串</strong>，来表示<strong>数据的类型</strong>。</p><p>各个数据类型对应typeof的值：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>Type</strong></th></tr></thead><tbody><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Null</td><td>“object”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Number</td><td>“number”</td></tr><tr><td>String</td><td>“string”</td></tr><tr><td>Symbol</td><td>“symbol”</td></tr><tr><td>宿主对象(JS环境提供的，比如浏览器)</td><td>Implementation-dependent</td></tr><tr><td>函数对象Function</td><td>“function”</td></tr><tr><td>任何其他对象Object</td><td>“object”</td></tr></tbody></table><p>下面是代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Numbers</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">37</span> === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-number">3.14</span> === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Math</span>.LN2 === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">Infinity</span> === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span> === <span class="hljs-string">&#x27;number&#x27;</span>; <span class="hljs-comment">// 尽管NaN是&quot;Not-A-Number&quot;的缩写,意思是&quot;不是一个数字&quot;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>) === <span class="hljs-string">&#x27;number&#x27;</span>; <span class="hljs-comment">// 不要这样使用!</span><br><br><span class="hljs-comment">// Strings</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;&quot;</span> === <span class="hljs-string">&#x27;string&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;bla&quot;</span> === <span class="hljs-string">&#x27;string&#x27;</span>;<br><span class="hljs-keyword">typeof</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>) === <span class="hljs-string">&#x27;string&#x27;</span>; <span class="hljs-comment">// typeof返回的肯定是一个字符串</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>) === <span class="hljs-string">&#x27;string&#x27;</span>; <span class="hljs-comment">// 不要这样使用!</span><br><br><span class="hljs-comment">// Booleans</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> === <span class="hljs-string">&#x27;boolean&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span> === <span class="hljs-string">&#x27;boolean&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>) === <span class="hljs-string">&#x27;boolean&#x27;</span>; <span class="hljs-comment">// 不要这样使用!</span><br><br><span class="hljs-comment">// Symbols</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>() === <span class="hljs-string">&#x27;symbol&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>) === <span class="hljs-string">&#x27;symbol&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>.iterator === <span class="hljs-string">&#x27;symbol&#x27;</span>;<br><br><span class="hljs-comment">// Undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>;<br><span class="hljs-keyword">typeof</span> blabla === <span class="hljs-string">&#x27;undefined&#x27;</span>; <span class="hljs-comment">// 一个未定义的变量,或者一个定义了却未赋初值的变量</span><br><br><span class="hljs-comment">// Objects</span><br><span class="hljs-keyword">typeof</span> &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125; === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-comment">// 使用Array.isArray或者Object.prototype.toString.call方法可以从基本的对象中区分出数组类型</span><br><span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>] === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-comment">// 下面的容易令人迷惑，不要这样使用！</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>) === <span class="hljs-string">&#x27;object&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>) ==== <span class="hljs-string">&#x27;object&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>) === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-comment">// 函数</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; === <span class="hljs-string">&#x27;function&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Math</span>.sin === <span class="hljs-string">&#x27;function&#x27;</span>;<br></code></pre></td></tr></table></figure><p>发现typeof来判断数据类型其实并不准确。比如数组、正则、日期、对象hj的typeof返回值都是object</p><h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><p>instanceof运算符可以用来判断某个构造函数的prototype属性<strong>是否存在于另外一个</strong>要检测对象<strong>的原型链上</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">C</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">D</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <br><br><span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> C();<br><br><span class="hljs-comment">// true，因为 Object.getPrototypeOf(o) === C.prototype</span><br>o <span class="hljs-keyword">instanceof</span> C; <br><br><span class="hljs-comment">// false，因为 D.prototype不在o的原型链上</span><br>o <span class="hljs-keyword">instanceof</span> D; <br><br>o <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>; <span class="hljs-comment">// true,因为Object.prototype.isPrototypeOf(o)返回true</span><br>C.prototype <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> <span class="hljs-comment">// true,同上</span><br><br>C.prototype = &#123;&#125;;<br><span class="hljs-keyword">var</span> o2 = <span class="hljs-keyword">new</span> C();<br><br>o2 <span class="hljs-keyword">instanceof</span> C; <span class="hljs-comment">// true</span><br><br>o <span class="hljs-keyword">instanceof</span> C; <span class="hljs-comment">// false,C.prototype指向了一个空对象,这个空对象不在o的原型链上.</span><br><br>D.prototype = <span class="hljs-keyword">new</span> C(); <span class="hljs-comment">// 继承</span><br><span class="hljs-keyword">var</span> o3 = <span class="hljs-keyword">new</span> D();<br>o3 <span class="hljs-keyword">instanceof</span> D; <span class="hljs-comment">// true</span><br>o3 <span class="hljs-keyword">instanceof</span> C; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网是如何运作的</title>
    <link href="/20211007/%E4%BA%92%E8%81%94%E7%BD%91%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/"/>
    <url>/20211007/%E4%BA%92%E8%81%94%E7%BD%91%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm">互联网是如何运作的</a></p><p>以下是我的总结,更好的学习建议阅读原文。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>互联网所有的传输都通过TCP/IP协议族来传输，TCP/IP是<strong>面向连接</strong>的<strong>可靠</strong>字节流服务协议</p><h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h1><p>您的计算机已连接到 Internet 并具有唯一的地址。它如何与连接到 Internet 的其他计算机“交谈”？</p><p>这里应该有一个例子：假设您的 IP 地址是 1.2.3.4，并且您想向计算机 5.6.7.8 发送一条消息。您要发送的消息是“Hello computer 5.6.7.8!”。显然，消息必须通过将您的计算机连接到 Internet 的任何类型的线路传输。假设您已从家里拨入您的 ISP，并且消息必须通过电话线传输。必须将消息从字母文本翻译成电子信号，通过互联网传输，然后再翻译回字母文本。 这是如何实现的？<br><strong>通过使用协议栈</strong>。每台计算机都需要一台在 Internet 上进行通信，它通常内置于计算机的操作系统（即 Windows、Unix 等）中。由于使用了两种主要的通信协议，Internet 上使用的协议栈被称为 <strong>TCP/IP 协议栈</strong>。TCP/IP 堆栈如下所示：</p><ul><li>应用层：提供特定于应用程序的协议  HTTP   FTP   IMAP(邮件)</li><li>网络控制层(TCP)：发送数据包到计算机上使用特定的端口号的应用程序</li><li>网络层(IP)：使用IP地址将数据包发送到特定的计算</li><li>链路层：将二进制数据包与网络信号相互之间转换（例如以太网网卡、电话线调制解调器等）</li></ul><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>HTTP 是 Web 浏览器和 Web 服务器用于通过 Internet 相互通信的协议。它是一种应用程序级协议，因为它位于协议栈中 TCP 层的顶部，并被特定应用程序用于相互通信。在这种情况下，应用程序是 Web 浏览器和 Web 服务器。</p><p>HTTP是一种基于无连接文本的协议。客户端（Web 浏览器）向 Web 服务器发送对 Web 元素（例如网页和图像）的请求。请求被服务器服务后，客户端和服务器之间通过 Internet 的连接断开。必须为每个请求建立一个新连接。大多数协议都是面向连接的。这意味着相互通信的两台计算机通过 Internet 保持连接打开。然而，HTTP 没有。在客户端发出 HTTP 请求之前，必须建立到服务器的新连接。</p><p>当您在 Web 浏览器中键入 URL 时，会发生以下情况：</p><ol><li>如果 URL 包含域名，则浏览器首先连接到域名服务器并为 Web 服务器检索相应的 IP 地址。</li><li>Web 浏览器连接到 Web 服务器并为所需的网页发送 HTTP 请求（通过协议栈）。</li><li>Web 服务器接收请求并检查所需页面。如果页面存在，则 Web 服务器发送它。如果服务器找不到请求的页面，它将发送 HTTP 404 错误消息。（404 的意思是“找不到页面”，任何浏览过网络的人都可能知道。）</li><li>Web 浏览器接收回页面并关闭连接。</li><li>然后浏览器解析页面并查找完成网页所需的其他页面元素。这些通常包括图像、小程序等。</li><li>对于每个需要的元素，浏览器会为每个元素向服务器发出额外的连接和 HTTP 请求。</li><li>当浏览器加载完所有图像、小程序等后，页面将完全加载到浏览器窗口中。</li></ol><h1 id="TCP（传输控制协议）"><a href="#TCP（传输控制协议）" class="headerlink" title="TCP（传输控制协议）"></a>TCP（传输控制协议）</h1><p>在协议栈的应用层之下是TCP层。当应用程序打开与 Internet 上另一台计算机的连接时，它们发送的消息（使用特定的应用程序层协议）会沿堆栈向下传递到 TCP 层。<strong>TCP 负责将应用程序协议路由到目标计算机上的正确应用程序。</strong> 为此，使用端口号。端口可以​​被认为是每台计算机上的独立通道。例如，您可以在阅读电子邮件时上网。这是因为这两个应用程序（Web 浏览器和邮件客户端）使用了不同的端口号。当数据包到达计算机并沿协议栈向上时，TCP 层根据端口号决定哪个应用程序接收数据包。<br>TCP 是这样工作的：</p><ul><li>当 TCP 层从上面接收到应用层协议数据时，它会将其分段为可管理的“块”，然后将带有特定 TCP 信息的 TCP 标头添加到每个“块”。TCP 头中包含的信息包括数据需要发送到的应用程序的端口号。</li><li>当 TCP 层接收到来自其下方 IP 层的数据包时，TCP 层会从数据包中剥离 TCP 头数据，必要时进行一些数据重构，然后使用从 TCP 获取的端口号将数据发送到正确的应用程序标题。</li></ul><p>这就是 TCP 将通过协议栈移动的数据路由到正确应用程序的方式。</p><p>TCP 不是文本协议。<strong>TCP 是面向连接的、可靠的字节流服务。</strong>面向连接意味着两个使用 TCP 的应用程序在交换数据之前必须先建立连接。TCP 是可靠的，因为对于收到的每个数据包，都会向发送方发送确认以确认交付。TCP 还在其标头中包含一个校验和，用于对接收到的数据进行错误检查。<br>tcp在建立连接会进行三次握手，每个收到的数据包都会向发送方发送ack确认，已确保发送成功</p><h1 id="IP（互联网协议）"><a href="#IP（互联网协议）" class="headerlink" title="IP（互联网协议）"></a>IP（互联网协议）</h1><p>与 TCP 不同，<strong>IP 是一种不可靠的无连接协议。</strong>IP 不关心数据包是否到达目的地。IP 也不知道连接和端口号。 IP 的工作也是将数据包发送和路由到其他计算机。IP 数据包是独立的实体，可能无序到达或根本没有到达。TCP 的工作是确保数据包到达并以正确的顺序。IP 与 TCP 的唯一共同点是它接收数据并将其自己的 IP 标头信息添加到 TCP 数据。</p><p>IP是不可靠的无连接协议，它并不关心数据包是否到达目的地，也不关系连接和端口号，目的是连接到目标IP</p><p>Ip是一种协议  有两种标准  IPv4 2^32次方和IPv6  2^128</p><h1 id="TCP传输的质量和顺序"><a href="#TCP传输的质量和顺序" class="headerlink" title="TCP传输的质量和顺序"></a>TCP传输的质量和顺序</h1><p>当数据包过大，在网络层会进行分包，分包后传输的链路不一样，到达的时间不一样，TCP会根据数据包上携带序列号来进行排序重组，如果发送方在一个特定时间内（也就是重试时间）没有接受到接收方的ack确认，会再次重新发送</p><p>#网络传输</p><ol><li>个人电脑</li><li>猫（调制解调器）</li><li>local ISP   互联网服务提供商</li><li>regional ISP   经过多个主干网络</li><li>NSP   网络服务提供商  大型网络  卖带宽给ISP</li><li>NAP   每个NSP连接到至少三个网络访问点</li><li>ISP  NSP 所有网络提供都携带路由器，每个路由有当前子网络ip的路由表，当底层向上层发送数据时候，找不到会依次向上找，可能由一个主干网络跳到另外一个主干网络。</li></ol><h1 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h1><p>存在意义是IP别名，不让公司丢客户，也容易记，DNS是一个分布式数据库，存储了域名和IP的对应关系</p>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode每日算法（2021-09-27）</title>
    <link href="/20210927/leetcode%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95%EF%BC%882021-09-27%EF%BC%89/"/>
    <url>/20210927/leetcode%E6%AF%8F%E6%97%A5%E7%AE%97%E6%B3%95%EF%BC%882021-09-27%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><p><img src="https://upload-images.jianshu.io/upload_images/13931286-470a4c38230853eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两数之和"></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>我首先想到的是暴力解法，就是对数组嵌套循环（时间复杂度是 O(n²)）：<br><img src="https://upload-images.jianshu.io/upload_images/13931286-efa42480453cddb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我首先想到的方法"><br>肯定有更好的办法<br>看到评论区有人说用逆向解法，用target减去数组中的一个数，然后判断得到的结果是否在数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) </span>&#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        x = target - nums[i]<br>        <span class="hljs-keyword">if</span>(map.has(x)) &#123;<br>            <span class="hljs-keyword">return</span> [map.get(x),i]<br>        &#125;<br>        map.set(nums[i],i)<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> hash = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (hash[target - nums[i]] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span> [i, hash[target - nums[i]]];<br>    &#125;<br>    hash[nums[i]] = i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> [];<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日常-最爱的电影</title>
    <link href="/20210925/%E6%B5%AE%E7%94%9F%E4%B8%80%E6%97%A5-%E6%9C%80%E7%88%B1%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
    <url>/20210925/%E6%B5%AE%E7%94%9F%E4%B8%80%E6%97%A5-%E6%9C%80%E7%88%B1%E7%9A%84%E7%94%B5%E5%BD%B1/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p><img src="https://img9.doubanio.com/view/photo/l/public/p2220184425.webp" alt="第六感海报"><br>今天重温了电影《第六感》，一部披着灵异外皮的心灵治愈电影。</p><p>有些电影无论第几遍看还是让人感动<br><img src="https://img2.doubanio.com/view/photo/l/public/p2351243392.webp" alt="第六感剧照"><br><img src="https://img1.doubanio.com/view/photo/l/public/p2356175109.webp" alt="第六感剧照"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列的理解以及应用场景</title>
    <link href="/20210923/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E7%90%86%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <url>/20210923/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E7%90%86%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h1><p><strong>栈（stack）</strong>又名堆栈，它是一种运算受限的线性表，<strong>限定仅在表尾进行插入和删除操作的线性表</strong>。</p><p>表尾这一端被称为栈顶，相反地另一端被称为栈底，向栈顶插入元素被称为进栈、入栈、压栈，从栈顶删除元素又称作出栈</p><p>所以其按照<strong>先进后出</strong>的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据，具有记忆作用</p><p>实现一个栈：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items = [];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 添加一个（或几个）新元素到栈顶</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>element 新元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">element</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items.push(element)<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 移除栈顶的元素，同时返回被移除的元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.pop()<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 返回栈顶的元素，不对栈做任何修改（这个方法不会移除栈顶的元素，仅仅返回它）</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">peek</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[<span class="hljs-built_in">this</span>.items.length - <span class="hljs-number">1</span>]<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 如果栈里没有任何元素就返回true,否则返回false</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">isEmpty</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length === <span class="hljs-number">0</span><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 移除栈里的所有元素</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">clear</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items = []<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 返回栈里的元素个数。这个方法和数组的length属性很类似</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">size</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items.length<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于栈的操作主要的方法如下：</p><ul><li>push：入栈操作</li><li>pop：出栈操作</li></ul><h1 id="二-队列"><a href="#二-队列" class="headerlink" title="二.队列"></a>二.队列</h1><p>跟栈十分相似，队列是一种特殊的线性表，特殊之处在于<strong>它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作</strong>。</p><p>进行插入操作的端称为队尾，进行删除操作的端称为队头，当队列中没有元素时，称为空队列</p><p>在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为<strong>先进先出</strong></p><p>简单实现一个队列，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = []<br>        <span class="hljs-built_in">this</span>.frontIndex = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">this</span>.tailIndex = <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">enqueue</span>(<span class="hljs-params">item</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list[<span class="hljs-built_in">this</span>.tailIndex++] = item<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">unqueue</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> item  = <span class="hljs-built_in">this</span>.list[<span class="hljs-built_in">this</span>.frontIndex]<br>        <span class="hljs-built_in">this</span>.frontIndex++        <br>        <span class="hljs-keyword">return</span> item<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三-应用场景"><a href="#三-应用场景" class="headerlink" title="三.应用场景"></a>三.应用场景</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>借助栈的先进后出的特性，可以简单实现一个逆序输出的功能，首先把所有元素依次入栈，然后把所有元素出栈并输出</p><p>包括编译器的在对输入的语法进行分析的时候，例如”()”、”{}”、”[]”这些成对出现的符号，借助栈的特性，凡是遇到括号的前半部分，即把这个元素入栈，凡是遇到括号的后半部分就比对栈顶元素是否该元素相匹配，如果匹配，则前半部分出栈，否则就是匹配出错</p><p>包括函数调用和递归的时候，每调用一个函数，底层都会进行入栈操作，出栈则返回函数的返回值</p><p>生活中的例子，可以把乒乓球盒比喻成一个堆栈，球一个一个放进去（入栈），最先放进去的要等其后面的全部拿出来后才能出来（出栈），这种就是典型的先进后出模型</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>当我们需要按照一定的顺序来处理数据，而该数据的数据量在不断地变化的时候，则需要队列来帮助解题</p><p>队列的使用广泛应用在广度优先搜索中，例如层次遍历一个二叉树的节点值</p><p>生活中的例子，排队买票，排在队头的永远先处理，后面的必须等到前面的全部处理完毕再进行处理，这也是典型的先进先出模型</p><p>参考文献</p><ul><li><a href="https://baike.baidu.com/item/%E6%A0%88/12808149">https://baike.baidu.com/item/%E6%A0%88/12808149</a></li><li><a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481">https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3(一)</title>
    <link href="/20210916/Vue3-%E4%B8%80/"/>
    <url>/20210916/Vue3-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>今天上课内容是 vue 3,共有两节课，一节讲基础，一节讲原理。</p><p>以下是课堂笔记：</p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-4c145b32d10b1824.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上课笔记"> </p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-3e37e261f17cbf13.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上课笔记"> </p><p><img src="https://upload-images.jianshu.io/upload_images/13931286-673deca33d797bcb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上课笔记"> </p>]]></content>
    
    
    <categories>
      
      <category>技术类-Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通读vue3文档记录</title>
    <link href="/20210915/vue3%E6%96%87%E6%A1%A3%E8%AE%B0%E5%BD%95/"/>
    <url>/20210915/vue3%E6%96%87%E6%A1%A3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>之前学习过vue2，这次项目使用vue3我只是快速粗略的看过改变的部分。今天有空就把vue3文档从头到尾看了一遍。就当做对vue从头开始的学习和补漏，理解了一些用法改变的原理。最明显的地方就是响应式的改变，vue2用的是<code>Object.defineProperty()</code>，vue3用的是<code>Proxy</code>。vue3还新增了<code>组合式API</code>等等。</p><p>这次记录主要是记录一些基础的，面试常被问到的，查漏补缺。</p><p>持续更新ing</p><h1 id="应用-amp-组件实例"><a href="#应用-amp-组件实例" class="headerlink" title="应用&amp;组件实例"></a>应用&amp;组件实例</h1><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>每个 Vue 应用都是通过用 createApp 函数创建一个新的<strong>应用实例</strong>开始的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123; <span class="hljs-comment">/* 选项 */</span> &#125;)<br></code></pre></td></tr></table></figure><p>该应用实例是用来在应用中注册“全局”组件的。我们将在后面的指南中详细讨论，简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br>app.component(<span class="hljs-string">&#x27;SearchInput&#x27;</span>, SearchInputComponent)<br>app.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, FocusDirective)<br>app.use(LocalePlugin)<br></code></pre></td></tr></table></figure><p>应用实例暴露的大多数方法都会返回该同一实例，允许链式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">Vue.createApp(&#123;&#125;)<br>  .component(<span class="hljs-string">&#x27;SearchInput&#x27;</span>, SearchInputComponent)<br>  .directive(<span class="hljs-string">&#x27;focus&#x27;</span>, FocusDirective)<br>  .use(LocalePlugin)<br></code></pre></td></tr></table></figure><h2 id="根组件实例"><a href="#根组件实例" class="headerlink" title="根组件实例"></a>根组件实例</h2><p>传递给 createApp 的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点。</p><p>一个应用需要被挂载到一个 DOM 元素中。例如，如果我们想把一个 Vue 应用挂载到 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，我们应该传递 <code>#app</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> RootComponent = &#123; <span class="hljs-comment">/* 选项 */</span> &#125;<br><span class="hljs-keyword">const</span> app = Vue.createApp(RootComponent)<br><span class="hljs-keyword">const</span> vm = app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>与大多数应用方法不同的是，<code>mount</code> 不返回应用本身。相反，它返回的是<strong>根组件实例</strong>。</p><p>虽然没有完全遵循 <code>MVVM</code> 模型，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 vm (ViewModel 的缩写) 这个变量名表示组件实例。</p><h1 id="计算属性-amp-侦听器"><a href="#计算属性-amp-侦听器" class="headerlink" title="计算属性&amp;侦听器"></a>计算属性&amp;侦听器</h1><h2 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h2><p>你可能已经注意到我们可以通过在表达式中调用方法来达到同样的效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; calculateBooksMessage() &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在组件中</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-function"><span class="hljs-title">calculateBooksMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.author.books.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性是基于它们的反应依赖关系缓存的。计算属性只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要<code>author.books</code> 还没有发生改变，多次访问 <code>publishedBookMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。 </p><p>这也同样意味着下面的计算属性将不再更新，因为 <strong>Date.now () 不是响应式依赖</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">computed: &#123;<br>  <span class="hljs-function"><span class="hljs-title">now</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Date</span>.now()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。</p><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <code>list</code>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <code>list</code>。如果没有缓存，我们将不可避免的多次执行 <code>list</code> 的 getter！如果你不希望有缓存，请用 method 来替代</p><hr><h2 id="以下为2021-09-16更新"><a href="#以下为2021-09-16更新" class="headerlink" title="以下为2021.09.16更新"></a>以下为2021.09.16更新</h2><h2 id="计算属性的-Setter"><a href="#计算属性的-Setter" class="headerlink" title="计算属性的 Setter"></a>计算属性的 Setter</h2><p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-attr">fullName</span>: &#123;<br>    <span class="hljs-comment">// getter</span><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName<br>    &#125;,<br>    <span class="hljs-comment">// setter</span><br>    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newValue</span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> names = newValue.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>      <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>]<br>      <span class="hljs-built_in">this</span>.lastName = names[names.length - <span class="hljs-number">1</span>]<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p><h1 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h1><p>如果你的组件有多个根元素，你需要定义哪些部分将接收这个类。可以使用 $attrs 组件属性执行此操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;baz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br>app.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;p :class=&quot;$attrs.class&quot;&gt;Hi!&lt;/p&gt;</span><br><span class="hljs-string">    &lt;span&gt;This is a child component&lt;/span&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h2><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好</p><h2 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a>v-if 与 v-for 一起使用</h2><blockquote><p>提示 不推荐同时使用 v-if 和 v-for</p></blockquote><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-if</code> 具有比 <code>v-for</code> 更高的优先级。请查阅列表渲染指南以获取详细信息。</p><p>当它们处于同一节点，<code>v-if</code> 的优先级比 <code>v-for</code> 更高，这意味着 <code>v-if</code> 将没有权限访问 <code>v-for</code> 里的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- This will <span class="hljs-keyword">throw</span> an error because property <span class="hljs-string">&quot;todo&quot;</span> is not defined on instance. --&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="xml">  &#123;&#123; todo &#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以把 v-for 移动到<code>&lt;template&gt;</code> 标签中来修正：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span>&gt;<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="xml">    &#123;&#123; todo &#125;&#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h1 id="表单绑定输入"><a href="#表单绑定输入" class="headerlink" title="表单绑定输入"></a>表单绑定输入</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value property 和 input 事件；</li><li>checkbox 和 radio 使用 checked property 和 change 事件；</li><li>select 字段将 value 作为 prop 并将 change 作为事件。</li></ul><h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><h2 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h2><p>这里有一个 Vue 组件的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个Vue 应用</span><br><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br><span class="hljs-comment">// 定义一个名为 button-counter 的新全局组件</span><br>app.component(<span class="hljs-string">&#x27;button-counter&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;button @click=&quot;count++&quot;&gt;</span><br><span class="hljs-string">      You clicked me &#123;&#123; count &#125;&#125; times.</span><br><span class="hljs-string">    &lt;/button&gt;`</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h2><p>你可以将组件进行任意次数的复用<br>每个组件都会各自独立维护它的<code>data</code>。因为你每用一次组件，就会有一个它的新组件实例被创建</p><h2 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 v-model</h2><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input v-model=<span class="hljs-string">&quot;searchText&quot;</span> /&gt;<br>等价于：<br><br>&lt;input :value=<span class="hljs-string">&quot;searchText&quot;</span> @input=<span class="hljs-string">&quot;searchText = $event.target.value&quot;</span> /&gt;<br>当用在组件上时，v-model 则会这样：<br><br>&lt;custom-input<br>  :model-value=<span class="hljs-string">&quot;searchText&quot;</span><br>  @update:model-value=<span class="hljs-string">&quot;searchText = $event&quot;</span><br>&gt;&lt;/custom-input&gt;<br></code></pre></td></tr></table></figure><p>为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须：</p><p>将其 <code>value</code> attribute 绑定到一个名叫 <code>modelValue</code> 的 prop 上<br>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>update:modelValue</code> 事件抛出<br>写成代码之后是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;custom-input&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;modelValue&#x27;</span>],<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input</span><br><span class="hljs-string">      :value=&quot;modelValue&quot;</span><br><span class="hljs-string">      @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span><br><span class="hljs-string">    &gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>现在 <code>v-model</code> 就应该可以在这个组件上完美地工作起来了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="深入组件"><a href="#深入组件" class="headerlink" title="深入组件"></a>深入组件</h1><h2 id="非-Prop-的-Attribute"><a href="#非-Prop-的-Attribute" class="headerlink" title="非 Prop 的 Attribute"></a>非 Prop 的 Attribute</h2><h3 id="Attribute-继承"><a href="#Attribute-继承" class="headerlink" title="Attribute 继承"></a>Attribute 继承</h3><p>当组件返回单个根节点时，非 prop attribute 将自动添加到根节点的 attribute 中。例如，在 <code>&lt;date-picker&gt;</code> 组件的实例中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;date-picker&#x27;</span>, &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div class=&quot;date-picker&quot;&gt;</span><br><span class="hljs-string">      &lt;input type=&quot;datetime&quot; /&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>如果我们需要通过 <code>data status</code> property 定义 <code>&lt;date-picker&gt;</code> 组件的状态，它将应用于根节点 (即 <code>div.date-picker</code>)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 具有非prop attribute的Date-picker组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">date-picker</span> <span class="hljs-attr">data-status</span>=<span class="hljs-string">&quot;activated&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">date-picker</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 渲染 date-picker 组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date-picker&quot;</span> <span class="hljs-attr">data-status</span>=<span class="hljs-string">&quot;activated&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样的规则适用于事件监听器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">date-picker</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;submitChange&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">date-picker</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;date-picker&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.$attrs) <span class="hljs-comment">// &#123; onChange: () =&gt; &#123;&#125;  &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当有一个 HTML 元素将 change 事件作为 date-picker 的根元素时，这可能会有帮助。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;date-picker&#x27;</span>, &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;select&gt;</span><br><span class="hljs-string">      &lt;option value=&quot;1&quot;&gt;Yesterday&lt;/option&gt;</span><br><span class="hljs-string">      &lt;option value=&quot;2&quot;&gt;Today&lt;/option&gt;</span><br><span class="hljs-string">      &lt;option value=&quot;3&quot;&gt;Tomorrow&lt;/option&gt;</span><br><span class="hljs-string">    &lt;/select&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>在这种情况下，change 事件监听器从父组件传递到子组件，它将在原生 select 的 change 事件上触发。我们不需要显式地从 date-picker 发出事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date-picker&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">date-picker</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;showChange&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">date-picker</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">showChange</span>(<span class="hljs-params">event</span>)</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(event.target.value) <span class="hljs-comment">// 将记录所选选项的值</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="禁用-Attribute-继承"><a href="#禁用-Attribute-继承" class="headerlink" title="禁用 Attribute 继承"></a>禁用 Attribute 继承</h3><p>如果你不希望组件的根元素继承 attribute，你可以在组件的选项中设置 <code>inheritAttrs: false</code>。例如：</p><p>禁用 attribute 继承的常见情况是需要将 attribute 应用于根节点之外的其他元素。</p><p>通过将 <code>inheritAttrs</code> 选项设置为 <code>false</code>，你可以访问组件的 <code>$attrs</code> property，该 property 包括组件 <code>props</code> 和 <code>emits</code> property 中未包含的所有属性 (例如，<code>class</code>、<code>style</code>、<code>v-on</code> 监听器等)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;date-picker&#x27;</span>, &#123;<br>  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;div class=&quot;date-picker&quot;&gt;</span><br><span class="hljs-string">      &lt;input type=&quot;datetime&quot; v-bind=&quot;$attrs&quot; /&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>有了这个新配置，<code>data status</code> attribute 将应用于 <code>input</code> 元素！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Date-picker 组件 使用非 prop attribute --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">date-picker</span> <span class="hljs-attr">data-status</span>=<span class="hljs-string">&quot;activated&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">date-picker</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 渲染 date-picker 组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;date-picker&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime&quot;</span> <span class="hljs-attr">data-status</span>=<span class="hljs-string">&quot;activated&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多个根节点上的-Attribute-继承"><a href="#多个根节点上的-Attribute-继承" class="headerlink" title="多个根节点上的 Attribute 继承"></a>多个根节点上的 Attribute 继承</h3><p>与单个根节点组件不同，具有多个根节点的组件不具有自动 attribute 回退行为。如果未显式绑定 $attrs，将发出运行时警告。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">custom-layout</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;custom-layout&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeValue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-layout</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这将发出警告</span><br>app.component(<span class="hljs-string">&#x27;custom-layout&#x27;</span>, &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;header&gt;...&lt;/header&gt;</span><br><span class="hljs-string">    &lt;main&gt;...&lt;/main&gt;</span><br><span class="hljs-string">    &lt;footer&gt;...&lt;/footer&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br><br><span class="hljs-comment">// 没有警告，$attrs被传递到&lt;main&gt;元素</span><br>app.component(<span class="hljs-string">&#x27;custom-layout&#x27;</span>, &#123;<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;header&gt;...&lt;/header&gt;</span><br><span class="hljs-string">    &lt;main v-bind=&quot;$attrs&quot;&gt;...&lt;/main&gt;</span><br><span class="hljs-string">    &lt;footer&gt;...&lt;/footer&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="处理-v-model-修饰符"><a href="#处理-v-model-修饰符" class="headerlink" title="处理 v-model 修饰符"></a>处理 v-model 修饰符</h3><p>在 2.x 中，我们对组件 <code>v-model</code> 上的 <code>.trim</code> 等修饰符提供了硬编码支持。但是，如果组件可以支持自定义修饰符，则会更有用。在 3.x 中，添加到组件 <code>v-model</code> 的修饰符将通过 <code>modelModifiers</code> prop 提供给组件：</p><p>让我们创建一个示例自定义修饰符 <code>capitalize</code>，它将 <code>v-model</code> 绑定提供的字符串的第一个字母大写。</p><p>添加到组件 <code>v-model</code> 的修饰符将通过 <code>modelModifiers</code> prop 提供给组件。在下面的示例中，我们创建了一个组件，其中包含默认为空对象的 <code>modelModifiers</code> prop。</p><p>请注意，当组件的 <code>created</code> 生命周期钩子触发时，<code>modelModifiers</code> prop 包含 <code>capitalize</code>，其值为 <code>true</code>——因为它被设置在 <code>v-model</code> 绑定 <code>v-model.capitalize=&quot;bar&quot;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-model.capitalize</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">modelValue</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">modelModifiers</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input type=&quot;text&quot; </span><br><span class="hljs-string">      :value=&quot;modelValue&quot;</span><br><span class="hljs-string">      @input=&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.modelModifiers) <span class="hljs-comment">// &#123; capitalize: true &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>现在我们已经设置了 prop，我们可以检查 <code>modelModifiers</code> 对象键并编写一个处理器来更改发出的值。在下面的代码中，每当 <code>&lt;input/&gt;</code> 元素触发 <code>input</code> 事件时，我们都将字符串大写。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-model.capitalize</span>=<span class="hljs-string">&quot;myText&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br>  &#123;&#123; myText &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">myText</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><br>app.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">modelValue</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-attr">modelModifiers</span>: &#123;<br>      <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> (&#123;&#125;)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">emitValue</span>(<span class="hljs-params">e</span>)</span> &#123;<br>      <span class="hljs-keyword">let</span> value = e.target.value<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.modelModifiers.capitalize) &#123;<br>        value = value.charAt(<span class="hljs-number">0</span>).toUpperCase() + value.slice(<span class="hljs-number">1</span>)<br>      &#125;<br>      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:modelValue&#x27;</span>, value)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;input</span><br><span class="hljs-string">    type=&quot;text&quot;</span><br><span class="hljs-string">    :value=&quot;modelValue&quot;</span><br><span class="hljs-string">    @input=&quot;emitValue&quot;&gt;`</span><br>&#125;)<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>对于带参数的 <code>v-model</code> 绑定，生成的 prop 名称将为 <code>arg + &quot;Modifiers&quot;</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-model:foo.capitalize</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">app.component(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;fooModifiers&#x27;</span>],<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;input type=&quot;text&quot; </span><br><span class="hljs-string">      :value=&quot;foo&quot;</span><br><span class="hljs-string">      @input=&quot;$emit(&#x27;update:foo&#x27;, $event.target.value)&quot;&gt;</span><br><span class="hljs-string">  `</span>,<br>  <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.fooModifiers) <span class="hljs-comment">// &#123; capitalize: true &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><hr><h2 id="2021-09-17更新"><a href="#2021-09-17更新" class="headerlink" title="2021.09.17更新"></a>2021.09.17更新</h2><h2 id="提供-注入"><a href="#提供-注入" class="headerlink" title="提供/注入"></a>提供/注入</h2><p>通常，当我们需要将数据从父组件传递到子组件时，我们使用<code>props</code>。想象一下这样的结构：你有一些深嵌套的组件，而你只需要来自深嵌套子组件中父组件的某些内容。在这种情况下，你仍然需要将 prop 传递到整个组件链中，这可能会很烦人。</p><p>对于这种情况，我们可以使用 <code>provide</code> 和 <code>inject</code> 对。父组件可以作为其所有子组件的依赖项提供程序，而不管组件层次结构有多深。这个特性有两个部分：父组件有一个 <code>provide</code> 选项来提供数据，子组件有一个 <code>inject</code> 选项来开始使用这个数据。</p><h1 id="可复用-amp-组合"><a href="#可复用-amp-组合" class="headerlink" title="可复用&amp;组合"></a>可复用&amp;组合</h1><h2 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h2><h3 id="虚拟DOM树"><a href="#虚拟DOM树" class="headerlink" title="虚拟DOM树"></a>虚拟DOM树</h3><p>Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM。请仔细看这行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> Vue.h(<span class="hljs-string">&#x27;h1&#x27;</span>, &#123;&#125;, <span class="hljs-built_in">this</span>.blogTitle)<br></code></pre></td></tr></table></figure><p><code>h()</code> 到底会返回什么呢？其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，包括及其子节点的描述信息。我们把这样的节点描述为“虚拟节点 (virtual node)”，也常简写它为 <strong>VNode</strong>。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。</p><h3 id="h-参数"><a href="#h-参数" class="headerlink" title="h()参数"></a>h()参数</h3><p>h() 函数是一个用于创建 vnode 的实用程序。也许可以更准确地将其命名为 createVNode()，但由于频繁使用和简洁，它被称为 h() 。它接受三个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">h(<br>  <span class="hljs-comment">// &#123;String | Object | Function | null&#125; tag</span><br>  <span class="hljs-comment">// 一个 HTML 标签名、一个组件、一个异步组件，或者 null。</span><br>  <span class="hljs-comment">// 使用 null 将会渲染一个注释。</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// 必需的。</span><br>  <span class="hljs-string">&#x27;div&#x27;</span>,<br><br>  <span class="hljs-comment">// &#123;Object&#125; props</span><br>  <span class="hljs-comment">// 与 attribute、prop 和事件相对应的对象。</span><br>  <span class="hljs-comment">// 我们会在模板中使用。</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// 可选的。</span><br>  &#123;&#125;,<br><br>  <span class="hljs-comment">// &#123;String | Array | Object&#125; children</span><br>  <span class="hljs-comment">// 子 VNodes, 使用 `h()` 构建,</span><br>  <span class="hljs-comment">// 或使用字符串获取 &quot;文本 Vnode&quot; 或者</span><br>  <span class="hljs-comment">// 有 slot 的对象。</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// 可选的。</span><br>  [<br>    <span class="hljs-string">&#x27;Some text comes first.&#x27;</span>,<br>    h(<span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-string">&#x27;A headline&#x27;</span>),<br>    h(MyComponent, &#123;<br>      <span class="hljs-attr">someProp</span>: <span class="hljs-string">&#x27;foobar&#x27;</span><br>    &#125;)<br>  ]<br>)<br></code></pre></td></tr></table></figure><h3 id="完整实例"><a href="#完整实例" class="headerlink" title="完整实例"></a>完整实例</h3><p>有了这些知识，我们现在可以完成我们最开始想实现的组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;&#125;)<br><br><span class="hljs-comment">/** Recursively get text from children nodes */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getChildrenTextContent</span>(<span class="hljs-params">children</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> children<br>    .map(<span class="hljs-function"><span class="hljs-params">node</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> node.children === <span class="hljs-string">&#x27;string&#x27;</span><br>        ? node.children<br>        : <span class="hljs-built_in">Array</span>.isArray(node.children)<br>        ? getChildrenTextContent(node.children)<br>        : <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;)<br>    .join(<span class="hljs-string">&#x27;&#x27;</span>)<br>&#125;<br><br>app.component(<span class="hljs-string">&#x27;anchored-heading&#x27;</span>, &#123;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// create kebab-case id from the text contents of the children</span><br>    <span class="hljs-keyword">const</span> headingId = getChildrenTextContent(<span class="hljs-built_in">this</span>.$slots.default())<br>      .toLowerCase()<br>      .replace(<span class="hljs-regexp">/\W+/g</span>, <span class="hljs-string">&#x27;-&#x27;</span>) <span class="hljs-comment">// replace non-word characters with dash</span><br>      .replace(<span class="hljs-regexp">/(^-|-$)/g</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// remove leading and trailing dashes</span><br><br>    <span class="hljs-keyword">return</span> Vue.h(<span class="hljs-string">&#x27;h&#x27;</span> + <span class="hljs-built_in">this</span>.level, [<br>      Vue.h(<br>        <span class="hljs-string">&#x27;a&#x27;</span>,<br>        &#123;<br>          <span class="hljs-attr">name</span>: headingId,<br>          <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;#&#x27;</span> + headingId<br>        &#125;,<br>        <span class="hljs-built_in">this</span>.$slots.default()<br>      )<br>    ])<br>  &#125;,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">level</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">Number</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术类-Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web设计模式解析与实战（一）</title>
    <link href="/20210912/web%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
    <url>/20210912/web%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p>今天课程主要是讲前端设计模式，早上一节，晚上一节。</p><hr><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>有利于</p><ol><li><p>组织模块</p></li><li><p>设计沟通</p></li><li><p>代码质量</p></li></ol><h1 id="五大设计原则："><a href="#五大设计原则：" class="headerlink" title="五大设计原则："></a>五大设计原则：</h1><ol><li>开闭原则（OCP：open close principle）<ul><li>开-对拓展开放，对修改关闭</li></ul></li><li>单一职责原则（SRP）<ul><li>岗位职责单一，互不重叠</li></ul></li><li>依赖倒置原则（DIP）<ul><li>上层不应该依赖下层实现</li></ul></li><li>接口隔离原则（ISP）<ul><li>多个专业的接口比单个胖借口好用</li></ul></li><li>里氏替换原则（LSP：the Lxxxx substitution principle）<ul><li>子类能够覆盖父类</li><li>父类能够出现的地方子类就能出现</li></ul></li></ol><hr><p>今天老师给的课后题：</p><ul><li>某个<strong>停车场</strong>，分为三层，每层100个车位，每个车位都能监控到车辆的驶入和离开，</li><li>车辆进入前，显示每层的空余车辆数量</li><li>车辆进入时，摄像头可识别车牌号和时间</li><li>车辆出来时，出口显示器显示车牌号和停车时长<br>请设计一套系统。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浮生一日(20210911)</title>
    <link href="/20210911/%E6%B5%AE%E7%94%9F%E4%B8%80%E6%97%A5/"/>
    <url>/20210911/%E6%B5%AE%E7%94%9F%E4%B8%80%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<p>今天老妈的生日🎂</p><p>猝不及防的狗粮</p><p><img src="/img/20210911/pic1.jpeg" alt="老妈的朋友圈"><br><img src="/img/20210911/pic2.jpeg" alt="老妈的朋友圈"></p><hr><p>苹果的售后真的好，耳机检测了一下就说直接换新的</p><p><img src="/img/20210911/AirPods.jpeg" alt="苹果售后"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript中函数的理解</title>
    <link href="/20210910/TypeScript%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/20210910/TypeScript%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>和JavaScript使用方式类似，可以通过<code>funciton</code>关键字、箭头函数等形式去定义，例如下面一个简单的加法函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">a:<span class="hljs-built_in">number</span>,b:<span class="hljs-built_in">number</span></span>)=&gt;</span> a+b<br></code></pre></td></tr></table></figure><p>上述只定义了函数的两个参数类型，这个时候整个函数虽然没有被显式定义，但是实际上TypeScript 编译器是能够通过类型推断到这个函数的类型，如下图所示：<br><img src="https://i.loli.net/2021/09/10/jzWf3SXsP4UqLpY.jpg" alt="TypeScript编译器的提示"><br>当鼠标放置在第三行 <code>add</code> 函数名的时候，会出现完整的函数定义类型，通过 <code>:</code> 的形式来定义参数类型，通过 <code>=&gt;</code> 连接参数和返回值类型</p><p>我们也可以显式地写上返回类型，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> add = (a:<span class="hljs-built_in">number</span>,<span class="hljs-attr">b</span>:<span class="hljs-built_in">number</span>):<span class="hljs-function"><span class="hljs-params">number</span>=&gt;</span> a+b<br></code></pre></td></tr></table></figure><p>当我们没有提供函数实现的情况下，有两种声明函数类型的方式，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">type</span> LongHand = &#123;<br>  (a: <span class="hljs-built_in">number</span>): <span class="hljs-built_in">number</span>;<br>&#125;;<br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">type</span> ShortHand = <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">number</span>;<br><br></code></pre></td></tr></table></figure><p>当存在函数重载时，只能使用方式一的形式</p><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p>当函数的参数可能是不存在的，只需要在参数后面加上 <code>?</code> 代表参数可能不存在，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b?: <span class="hljs-built_in">number</span></span>) =&gt;</span> a + (b ? b : <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>这时候参数<code>b</code>可以是<code>number类型</code>或者<code>undefined类型</code>，即可以传一个<code>number类型</code>或者不传都可以</p><h2 id="剩余类型"><a href="#剩余类型" class="headerlink" title="剩余类型"></a>剩余类型</h2><p>剩余参数与JavaScript的语法类似，需要用 <code>...</code> 来表示剩余参数</p><p>如果剩余参数 rest 是一个由number类型组成的数组，则如下表示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, ...rest: <span class="hljs-built_in">number</span>[]</span>) =&gt;</span> rest.reduce((<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b), a)<br></code></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>允许创建数项名称相同但输入输出类型或个数不同的子程序，它可以简单地称为一个单独功能可以执行多项任务的能力</p><p>关于typescript函数重载，必须要把精确的定义放在前面，最后函数实现时，需要使用 <code>|操作符</code>或者<code>?操作符</code>，把所有可能的输入类型全部包含进去，用于具体实现</p><p>这里的函数重载也只是多个函数的声明，具体的逻辑还需要自己去写，typescript并不会真的将你的多个重名 function的函数体进行合并</p><p>例如我们有一个add函数，它可以接收 string类型的参数进行拼接，也可以接收 number 类型的参数进行相加，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 上边是声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span>, arg2: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">number</span>, arg2: <span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span></span></span><br><span class="hljs-function"><span class="hljs-function">// 因为我们在下边有具体函数的实现，所以这里并不需要添加 <span class="hljs-title">declare</span> 关键字</span></span><br><span class="hljs-function"><span class="hljs-function"></span></span><br><span class="hljs-function"><span class="hljs-function">// 下边是实现</span></span><br><span class="hljs-function"><span class="hljs-function"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span> (<span class="hljs-params">arg1: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>, arg2: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>) </span>&#123;</span></span><br><span class="hljs-function"><span class="hljs-function">  // 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 <span class="hljs-title">arg1</span> + <span class="hljs-title">arg2</span></span></span><br><span class="hljs-function"><span class="hljs-function">  <span class="hljs-title">if</span> (<span class="hljs-params"><span class="hljs-keyword">typeof</span> arg1 === <span class="hljs-string">&#x27;string&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> arg2 === <span class="hljs-string">&#x27;string&#x27;</span></span>) </span>&#123;</span><br><span class="hljs-function">    <span class="hljs-title">return</span> <span class="hljs-title">arg1</span> + <span class="hljs-title">arg2</span></span><br><span class="hljs-function">  &#125; <span class="hljs-title">else</span> <span class="hljs-title">if</span> (<span class="hljs-params"><span class="hljs-keyword">typeof</span> arg1 === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span> arg2 === <span class="hljs-string">&#x27;number&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arg1 + arg2<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>从上面可以看到：</p><ul><li>从定义的方式而言，typescript 声明函数需要定义参数类型或者声明返回值类型</li><li>typescript 在参数中，添加可选参数供使用者选择</li><li>typescript 增添函数重载功能，使用者只需要通过查看函数声明的方式，即可知道函数传递的参数个数以及类型<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1></li><li><a href="https://www.tslang.cn/docs/handbook/functions.html">https://www.tslang.cn/docs/handbook/functions.html</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD">https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD</a></li><li><a href="https://jkchao.github.io/typescript-book-chinese/typings/functions.html#%E9%87%8D%E8%BD%BD">https://jkchao.github.io/typescript-book-chinese/typings/functions.html#%E9%87%8D%E8%BD%BD</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术类-TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本博客说明书</title>
    <link href="/20210907/about-me/"/>
    <url>/20210907/about-me/</url>
    
    <content type="html"><![CDATA[<blockquote><p>幸福不是一件容易的事：她很难求之于自身，但要想在别处得到则不可能。——尚福尔</p></blockquote><p>19年搭过一个博客，可惜不好用，上传的图片经常不显示，于是就放弃使用了，后来把地址搞丢了找不回来了。<br>所以我又重新搭了一个。<br>后续会把写过的文档陆续上传到这边<br>本博客主要记录学习过程，技术文档以及日常。</p><p>以下是功能测试：<br>嵌入B站视频</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=846655043&bvid=BV1e54y1n7XK&cid=371989206&page=1" scrolling="no" border="0" frameborder="no" framespacing="0"allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"> </iframe></div><p>代码块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;zouHuaLu&#x27;</span>)<br>hexo g<br>hexo g -w<br>hexo server<br>hexo clean<br>hexo deploy<br></code></pre></td></tr></table></figure><p>以后有时间弄一下评论功能</p><hr><p>2021-09-23 本博客新增评论功能，支持评论啦！</p>]]></content>
    
    
    <categories>
      
      <category>博客说明</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客说明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript中类的理解</title>
    <link href="/20210906/TypeScript%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/20210906/TypeScript%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h1><p>类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础</p><blockquote><p>❝类是一种用户定义的引用数据类型，也称类类型❞</p></blockquote><p>传统的面向对象语言基本都是基于类的，<code>JavaScript</code> 基于原型的方式让开发者多了很多理解成本<br>在 <code>ES6</code> 之后，<code>JavaScript</code> 拥有了 <code>class</code> 关键字，虽然本质依然是构造函数，但是使用起来已经方便了许多<br>但是<code>JavaScript</code> 的<code>class</code>依然有一些特性还没有加入，比如修饰符和抽象类<br><code>TypeScript</code> 的 <code>class</code>  支持面向对象的所有特性，比如 类、接口等</p><h1 id="二、使用方式"><a href="#二、使用方式" class="headerlink" title="二、使用方式"></a>二、使用方式</h1><p>定义类的关键字为 <code>class</code>，后面紧跟类名，类可以包含以下几个模块(类的数据成员)：</p><p>「字段」：字段是类里面声明的变量。字段表示对象的有关数据。</p><p>「构造函数」：类实例化时调用，可以为类的对象分配内存。</p><p>「方法」：方法为对象要执行的操作<br>如下例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123; <br>    <span class="hljs-comment">// 字段 </span><br>    <span class="hljs-attr">engine</span>:<span class="hljs-built_in">string</span>; <br> <br>    <span class="hljs-comment">// 构造函数 </span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">engine:<span class="hljs-built_in">string</span></span>)</span> &#123; <br>        <span class="hljs-built_in">this</span>.engine = engine <br>    &#125;  <br> <br>    <span class="hljs-comment">// 方法 </span><br>    disp():<span class="hljs-built_in">void</span> &#123; <br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;发动机为 :   &quot;</span>+<span class="hljs-built_in">this</span>.engine) <br>    &#125; <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>类的继承使用过<code>extends</code>的关键字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">move</span>(<span class="hljs-params">distanceInMeters: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Animal moved <span class="hljs-subst">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">bark</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Woof! Woof!&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog();<br>dog.bark();<br>dog.move(<span class="hljs-number">10</span>);<br>dog.bark();<br><br></code></pre></td></tr></table></figure><p><code>Dog</code>是一个 派生类，它派生自 <code>Animal</code> 基类，派生类通常被称作子类，基类通常被称作 <strong>超类</strong>。</p><p><code>Dog</code>类继承了<code>Animal</code>类，因此实例<code>dog</code>也能够使用<code>Animal</code>类<code>move</code>方法。<br>同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。</p><p>通过super关键字是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrinterClass</span> </span>&#123; <br>   doPrint():<span class="hljs-built_in">void</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;父类的 doPrint() 方法。&quot;</span>) <br>   &#125; <br>&#125; <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringPrinter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">PrinterClass</span> </span>&#123; <br>   doPrint():<span class="hljs-built_in">void</span> &#123; <br>      <span class="hljs-built_in">super</span>.doPrint() <span class="hljs-comment">// 调用父类的函数</span><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;子类的 doPrint()方法。&quot;</span>)<br>   &#125; <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>可以看到，上述的形式跟ES6十分的相似，typescript在此基础上添加了三种修饰符：</p><ul><li>公共 public：可以自由的访问类程序里定义的成员</li><li>私有 private：只能够在该类的内部进行访问</li><li>受保护 protect：除了在该类的内部可以访问，还可以在子类中仍然可以访问</li></ul><h3 id="私有修饰符"><a href="#私有修饰符" class="headerlink" title="私有修饰符"></a>私有修饰符</h3><p>只能够在该类的内部进行访问，实例对象并不能够访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">private</span> name:<span class="hljs-built_in">String</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">String</span></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> father = <span class="hljs-keyword">new</span> Father(<span class="hljs-string">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class="hljs-comment">//会报错，提示 &quot;属性name为私有属性，只能在Father类中访问&quot;</span><br></code></pre></td></tr></table></figure><p>并且继承该类的子类并不能访问，如下图所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">private</span> name:<span class="hljs-built_in">String</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">String</span></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>)  <span class="hljs-comment">//会报错，提示 &quot;属性name为私有属性，只能在Father类中访问&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="受保护修饰符"><a href="#受保护修饰符" class="headerlink" title="受保护修饰符"></a>受保护修饰符</h3><p>跟私有修饰符很相似，实例对象同样不能访问受保护的属性，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> name:<span class="hljs-built_in">String</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">String</span></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> father = <span class="hljs-keyword">new</span> Father(<span class="hljs-string">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class="hljs-comment">//会报错，提示 &quot;属性name受保护，只能在类Father及其子类中访问&quot;</span><br></code></pre></td></tr></table></figure><p>有一点不同的是 <code>protected</code> 成员在子类中仍然可以访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> name:<span class="hljs-built_in">String</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">String</span></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>`</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="只读修饰符"><a href="#只读修饰符" class="headerlink" title="只读修饰符"></a>只读修饰符</h3><p>通过<code>readonly</code>关键字进行声明，只读属性必须在声明时或构造函数里被初始化，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;<br>    <span class="hljs-keyword">readonly</span> name:<span class="hljs-built_in">String</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">String</span></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> father = <span class="hljs-keyword">new</span> Father(<span class="hljs-string">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class="hljs-comment">//会报错,提示&quot;无法分配到name，因为它是只读属性&quot;</span><br></code></pre></td></tr></table></figure><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>这些属性存在于类本身上面而不是类的实例上，通过<code>static</code>进行定义，访问这些属性需要通过 <code>类型.静态属性</code> 的这种形式访问，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> width = <span class="hljs-string">&#x27;100px&#x27;</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Square.width) <span class="hljs-comment">// 100px</span><br></code></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节<br><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-keyword">abstract</span> makeSound(): <span class="hljs-built_in">void</span>;<br>    move(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;roaming the earch...&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种类并不能被实例化，通常需要我们创建子类去继承，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-title">makeSound</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;miao miao&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> cat = <span class="hljs-keyword">new</span> Cat()<br><br>cat.makeSound() <span class="hljs-comment">// miao miao</span><br>cat.move() <span class="hljs-comment">// roaming the earch...</span><br></code></pre></td></tr></table></figure><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><p>除了日常借助类的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在<code>React</code> 工程中是很常用的，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Carousel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">Props</span>, <span class="hljs-title">State</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>由于组件需要传入 props 的类型 Props ，同时有需要设置默认 props 即 defaultProps，这时候更加适合使用class作为接口。</p><p>先声明一个类，这个类包含组件 props 所需的类型和初始值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// props的类型</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Props</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> children: <span class="hljs-built_in">Array</span>&lt;React.ReactElement&lt;<span class="hljs-built_in">any</span>&gt;&gt; | React.ReactElement&lt;<span class="hljs-built_in">any</span>&gt; | <span class="hljs-built_in">never</span>[] = []<br>  <span class="hljs-keyword">public</span> speed: <span class="hljs-built_in">number</span> = <span class="hljs-number">500</span><br>  <span class="hljs-keyword">public</span> height: <span class="hljs-built_in">number</span> = <span class="hljs-number">160</span><br>  <span class="hljs-keyword">public</span> animation: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;easeInOutQuad&#x27;</span><br>  <span class="hljs-keyword">public</span> isAuto: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">public</span> autoPlayInterval: <span class="hljs-built_in">number</span> = <span class="hljs-number">4500</span><br>  <span class="hljs-keyword">public</span> afterChange: <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>  <span class="hljs-keyword">public</span> beforeChange: <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>  <span class="hljs-keyword">public</span> selesctedColor: <span class="hljs-built_in">string</span><br>  <span class="hljs-keyword">public</span> showDots: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当我们需要传入 <code>props</code> 类型的时候直接将 <code>Props</code> 作为接口传入，此时 <code>Props</code> 的作用就是接口，而当需要我们设置<code>defaultProps</code>初始值的时候，我们只需要:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> defaultProps = <span class="hljs-keyword">new</span> Props()<br></code></pre></td></tr></table></figure><p><code>Props</code> 的实例就是 <code>defaultProps</code> 的初始值，这就是 <code>class</code>作为接口的实际应用，我们用一个 <code>class</code> 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="https://www.tslang.cn/docs/handbook/classes.html">https://www.tslang.cn/docs/handbook/classes.html</a></li><li><a href="https://www.runoob.com/typescript/ts-class.html">https://www.runoob.com/typescript/ts-class.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术类-TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>export与export default的区别</title>
    <link href="/20210701/export%E4%B8%8Eexport-default%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/20210701/export%E4%B8%8Eexport-default%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>node中导入模块：var 名称 = require(‘模块标识符’)</p><p>node中向外暴露成员的形式：module.exports = {}</p><p>在ES6中，也通过规范的形式，规定了ES6中如何导入和导出模块</p><p>ES6中导入模块，使用 import 模块名称 from ‘模块标识符’    import ‘表示路径’</p><p>import * from * 是ES6中导入模块的方式</p><h3 id="在ES6中，使用export-default-和-export-向外暴露成员"><a href="#在ES6中，使用export-default-和-export-向外暴露成员" class="headerlink" title="在ES6中，使用export default 和 export 向外暴露成员"></a>在ES6中，使用export default 和 export 向外暴露成员</h3><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// test.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// test.js</span><br><span class="hljs-keyword">var</span> info = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> info<br></code></pre></td></tr></table></figure><p>在main.js中接收，test.js使用export default 向外暴露的成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> person <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span><br><span class="hljs-built_in">console</span>.log(person);<br></code></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1、export default 向外暴露的成员，可以使用任意变量来接收</p><p>2、在一个模块中，export default 只允许向外暴露一次</p><p>3、在一个模块中，可以同时使用export default 和export 向外暴露成员</p><p>4、使用export向外暴露的成员，只能使用{  }的形式来接收，这种形式，叫做【按需导出】</p><p>5、export可以向外暴露多个成员，同时，如果某些成员，在import导入时，不需要，可以不在{ }中定义</p><p>6、使用export导出的成员，必须严格按照导出时候的名称，来使用{ }按需接收</p><p>7、使用export导出的成员，如果想换个变量名称接收，可以使用as来起别名</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// test.js</span><br><span class="hljs-keyword">var</span> info = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> info<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> title = <span class="hljs-string">&#x27;小星星&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> content = <span class="hljs-string">&#x27;哈哈哈&#x27;</span><br></code></pre></td></tr></table></figure><p>在main.js中接收，test.js使用export default 和 export 向外暴露的成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> person, &#123;title, content <span class="hljs-keyword">as</span> content1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span><br><span class="hljs-built_in">console</span>.log(person);<br><span class="hljs-built_in">console</span>.log(title + <span class="hljs-string">&#x27;=======&#x27;</span> + content1);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>new操作符的实现</title>
    <link href="/20210619/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/20210619/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="JavaScript中的new操作符的原理"><a href="#JavaScript中的new操作符的原理" class="headerlink" title="JavaScript中的new操作符的原理"></a>JavaScript中的new操作符的原理</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br> <span class="hljs-built_in">this</span>.name = name<br> <span class="hljs-built_in">this</span>.age = age<br>&#125;<br><span class="hljs-keyword">const</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;走花路的长颈鹿&#x27;</span>, <span class="hljs-number">26</span>)<br><span class="hljs-built_in">console</span>.log(person1) <span class="hljs-comment">//Person&#123;name:&#x27;走花路的长颈鹿&#x27;,age:26&#125;</span><br></code></pre></td></tr></table></figure><p>先定义了一个构造函数<code>Person</code>，然后通过<code>new</code>操作符生成Person构造函数的一个实例并将其引用赋值给变量<code>person1</code>。然后控制台打印出<code>person1</code>的内容，可以看到该实例对象具有<code>name</code>和<code>age</code>属性，它们的值就是我们在调用构造函数时传入的值。</p><h2 id="new关键字进行的操作"><a href="#new关键字进行的操作" class="headerlink" title="new关键字进行的操作"></a>new关键字进行的操作</h2><ol><li><p> 先创建一个空对象<code>obj=&#123;&#125;</code></p></li><li><p> 将obj的<code>__proto__</code>原型指向构造函数Person的<code>prototype</code>原型对象，即<code>obj.__proto__ = Person.prototype</code></p></li><li><p> 将构造函数Person内部的this指向obj，然后执行构造函数<code>Person()</code>（也就是跟调用普通函数一样，只是此时函数的this为新创建的对象<code>obj</code>而已，就好像执行<code>obj.Person()</code>一样）</p></li><li><p> 若构造函数没有返回非原始值（即不是引用类型的值），则返回该新建的对象<code>obj</code>（默认会添加<code>return this</code>）。否则，返回引用类型的值。</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/13931286-2638e8196f6e699b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new操作符的执行过程"> </p><h2 id="自己实现一个new操作符"><a href="#自己实现一个new操作符" class="headerlink" title="自己实现一个new操作符"></a>自己实现一个new操作符</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span> <span class="hljs-params">(constr, <span class="hljs-rest_arg">...args</span>)</span> </span>&#123;<br> <span class="hljs-comment">// 1,2 创建一个对象obj，将obj的__proto__属性指向构造函数的原型对象</span><br> <span class="hljs-comment">// 即实现：obj.__proto__ === constructor.prototype</span><br> <span class="hljs-keyword">var</span> obj = Object.create(constr.prototype)<br> <span class="hljs-comment">// 3.将constrc内部的this（即执行上下文）指向obj，并执行</span><br> <span class="hljs-keyword">var</span> result = constr.apply(obj, args)<br> <span class="hljs-comment">// 4\. 如果构造函数返回的是对象，则使用构造函数执行的结果。否则，返回新创建的对象</span><br> <span class="hljs-keyword">return</span> result <span class="hljs-keyword">instanceof</span> Object ? result : obj<br>&#125;<br><br><span class="hljs-comment">// 使用的例子：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span><span class="hljs-params">(name, age)</span></span>&#123;<br> <span class="hljs-keyword">this</span>.name = name;<br> <span class="hljs-keyword">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">const</span> person1 = myNew(Person, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>)<br>console.log(person1)  <span class="hljs-comment">// Person &#123;name: &quot;Tom&quot;, age: 20&#125;</span><br></code></pre></td></tr></table></figure><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><ol><li><p> 将新创建对象的原型链设置正确，这样我们才能使用原型链上的方法。</p></li><li><p> 将新创建的对象作为构造函数执行的上下文，这样我们才能正确地进行一些初始化操作。</p></li></ol><hr><h2 id="2021年7月1日补充"><a href="#2021年7月1日补充" class="headerlink" title="2021年7月1日补充"></a>2021年7月1日补充</h2><p>看一个例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Player(<span class="hljs-params">color</span>)</span> &#123;<br>  this.color = color<br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Player</span>.</span></span>prototype.start = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;&#125;<br><br>const white = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Player(&#x27;<span class="hljs-params">white</span>&#x27;)</span><br>const black = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Player(&#x27;<span class="hljs-params">black</span>&#x27;)</span><br><br>console.log(black.__proto__)  <span class="hljs-comment">// start()</span><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(<span class="hljs-params">black</span>)</span>) <span class="hljs-comment">// start()</span><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Player</span>.</span></span>prototype) <span class="hljs-comment">// start()</span><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Player</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span>)</span></span> <span class="hljs-comment">// &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>根据反推可以写一下思路</p><ol><li>一个继承自<code>Player.prototype</code>的新对象 p1/p2被创建</li><li><code>p1.__proto__ === Player.prototype</code>，<code>p1.__proto__</code>指向<code>Player.prototype</code></li><li>将this指向新创建的对象p1/p2</li><li>返回一个新对象：<ol><li>如果构造函数没有显示的返回值，那么返回this</li><li>如果有显式的返回值，是基本类型，那么还是返回this</li><li>如果构造函数有显式的返回值，是对象类型，比如是{a:1}，那么就返回{a:1}<br>现在我们再来实现一个new指令的功能<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Player</span>(<span class="hljs-params">name</span>)</span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objectFactory</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>  <span class="hljs-keyword">let</span> FunctionConstructor = [].shift.call(<span class="hljs-built_in">arguments</span>)<br>  o.__proto__ = FunctionConstructor.prototype<br>  <span class="hljs-keyword">let</span> resultObj = FunctionConstructor.apply(o, <span class="hljs-built_in">arguments</span>) <br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> resultObj === <span class="hljs-string">&#x27;object&#x27;</span> ? resultObj : o<br>&#125;<br><span class="hljs-keyword">const</span> p1 = objectFactory(Player, <span class="hljs-string">&#x27;花鹿&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(p1) <span class="hljs-comment">// 花鹿</span><br></code></pre></td></tr></table></figure><h2 id="完"><a href="#完" class="headerlink" title="完~"></a>完~</h2></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型与原型链与constructor</title>
    <link href="/20210618/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8Econstructor/"/>
    <url>/20210618/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8Econstructor/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="原型与原型链与constructor"><a href="#原型与原型链与constructor" class="headerlink" title="原型与原型链与constructor"></a>原型与原型链与constructor</h1><p>本文参考自：<a href="https://blog.csdn.net/cc18868876837/article/details/81211729">https://blog.csdn.net/cc18868876837/article/details/81211729</a></p><h2 id="先来个总结："><a href="#先来个总结：" class="headerlink" title="先来个总结："></a>先来个总结：</h2><ol><li><p> 我们需要牢记两点：①<code>__proto__</code>和<code>constructor</code>属性是对象所独有的；② <code>prototype</code>属性是函数所独有的，因为函数也是一种对象，所以函数也拥有<code>__proto__</code>和<code>constructor</code>属性。</p></li><li><p> __<code>proto__</code>属性的作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（父对象）里找，一直找，直到<code>__proto__</code>属性的终点null，再往上找就相当于在null上取值，会报错。通过<code>__proto__</code>属性将对象连接起来的这条链路即我们所谓的原型链。</p></li><li><p> <code>prototype</code>属性的作用就是让该函数所实例化的对象们都可以找到公用的属性和方法，即<code>f1.__proto__ === Foo.prototype</code>。</p></li><li><p> <code>constructor</code>属性的含义就是指向该对象的构造函数，所有函数（此时看成对象了）最终的构造函数都指向<code>Function</code>。</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/13931286-5467dbdb42fd91ef?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="整体的联系"> </p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><code>__proto__</code>翻译为<strong>原型</strong>，多个<code>__proto__</code>串连起来的叫做<strong>原型链</strong>。</p><p><code>prototype</code>翻译为<strong>原型对象</strong>。</p><h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h2><p><code>Object.getPrototypeOf()</code> 方法返回指定对象的原型（内部<code>[[Prototype]]</code>属性的值）。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const prototype1 = &#123;&#125;;<br>const object1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>create(prototype1);<br><br>console.log(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(<span class="hljs-params">object1</span>)</span><span class="hljs-operator"> === </span>prototype1);<br><span class="hljs-comment">// expected output: true</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(<span class="hljs-params">object1</span>)</span><span class="hljs-operator"> === </span>object1.__proto__<br></code></pre></td></tr></table></figure><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">function <span class="hljs-type">Foo</span>() <span class="hljs-meta">&#123;...&#125;</span>;<br><span class="hljs-keyword">let</span> f1 = new <span class="hljs-type">Foo</span>();<br></code></pre></td></tr></table></figure><p>以上代码表示创建一个构造函数Foo()，并用new关键字实例化该构造函数得到一个实例化对象f1。这里稍微补充一下new操作符将函数作为构造器进行调用时的过程：<strong>函数被调用，然后新创建一个对象，并且成了函数的上下文（也就是此时函数内部的this是指向该新创建的对象，这意味着我们可以在构造器函数内部通过this参数初始化值），最后返回该新对象的引用。</strong></p><h2 id="proto-属性"><a href="#proto-属性" class="headerlink" title="__proto__属性"></a><code>__proto__</code>属性</h2><p>首先要记住两点：</p><ol><li><p> <code>__proto__</code>和<code>constructor</code>是对象才有的属性，在JavaScript中函数也是一种对象。</p></li><li><p> <code>prototype</code>是函数才有的属性。</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/13931286-9355e730b53d1879?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="__proto__"> </p><p>这里我们仅留下 <code>__proto__</code> 属性，它是对象所独有的，可以看到<code>__proto__</code>属性都是由<strong>一个对象指向一个对象</strong>，即指向它们构造函数的<strong>原型对象</strong>（也可以理解为父对象），那么这个属性的作用是什么呢？它的<strong>作用就是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的<code>__proto__</code>属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的<code>__proto__</code>属性所指向的那个对象（可以理解为爷爷对象）里找，如果还没找到，则继续往上找…直到原型链顶端null（可以理解为原始人。。。），再往上找就相当于在null上取值，会报错（可以理解为，再往上就已经不是“人”的范畴了，找不到了，到此结束，null为原型链的终点）</strong>，由以上这种通过<code>__proto__</code>属性来连接对象直到null的一条链即为我们所谓的原型链。    其实我们平时调用的字符串方法、数组方法、对象方法、函数方法等都是靠<code>__proto__</code>继承而来的。</p><h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a><code>prototype</code>属性</h2><p><img src="https://upload-images.jianshu.io/upload_images/13931286-a68d7e7851adf580?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prototype属性"> </p><p><code>prototype</code>属性是函数独有的。他是从一个函数指向一个对象，他的含义是函数的原型对象</p><p><code>f1.__proto__ === Foo.prototype</code>，它们两个完全一样。那prototype属性的作用又是什么呢？<strong>它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法。</strong>任何函数在创建的时候，其实会默认同时创建该函数的prototype对象。</p><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p><img src="https://upload-images.jianshu.io/upload_images/13931286-8de481f4fbc04fee?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="constructor属性"> </p><p><code>constructor</code>属性也是对象才拥有的，它是从一个对象指向一个函数，含义就是指向该对象的构造函数，每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合<code>__proto__</code>属性查看会更清楚点，如下图所示），从上图中可以看出<code>Function</code>这个对象比较特殊，它的构造函数就是它自己（因为<code>Function</code>可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由<code>Function</code>构造函数得来，所以<code>constructor</code>属性的终点就是<code>Function</code>这个函数。</p><p><code>函数创建的对象.__proto__ === 该函数.prototype，该函数.prototype.constructor===该函数本身</code></p><h2 id="完"><a href="#完" class="headerlink" title="完~"></a>完~</h2>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue自定义全局组件</title>
    <link href="/20210618/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6/"/>
    <url>/20210618/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="vue自定义全局弹框组件"><a href="#vue自定义全局弹框组件" class="headerlink" title="vue自定义全局弹框组件"></a>vue自定义全局弹框组件</h1><ol><li><p>在components文件夹下新增一个组件文件夹Dialog，新建一个模板组件Dialog.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;u_dialog_panel&quot; @touchmove.stop=&quot;noop&quot;&gt;<br>    &lt;div class=&quot;mask&quot; v-if=&quot;visible&quot; @click=&quot;handleClose&quot;&gt;&lt;/div&gt;<br>    &lt;transition name=&quot;open&quot;&gt;<br>      &lt;div v-if=&quot;visible&quot; class=&quot;dialog_body&quot;&gt;<br>        &lt;slot&gt;&lt;/slot&gt;<br>        &lt;div class=&quot;btns&quot; v-if=&quot;confirmText || cancleText&quot;&gt;<br>          &lt;div class=&quot;cancle btn&quot; v-if=&quot;cancleText&quot; @click=&quot;handleCancle&quot;&gt;&#123;&#123;cancleText&#125;&#125;&lt;/div&gt;<br>          &lt;div class=&quot;confirm btn&quot; :style=&quot;confirmStyle&quot; v-if=&quot;confirmText&quot; @click=&quot;handleConfirm&quot;&gt;&#123;&#123;confirmText&#125;&#125;&lt;/div&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    &lt;/transition&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &#x27;UDialog&#x27;,<br>  props: &#123;<br>    visible: &#123; type: Boolean, default: false, required: true &#125;,<br>    // 确定按钮的文案<br>    confirmText: &#123; type: String, default: &#x27;确定&#x27; &#125;,<br>    confirmStyle: &#123; type: String, default: &#x27;&#x27; &#125;,<br>    // 取消按钮的文案<br>    cancleText: &#123; type: String, default: &#x27;取消&#x27; &#125;,<br>    cancleStyle: &#123; type: String, default: &#x27;&#x27; &#125;,<br>  &#125;,<br>  created () &#123;<br>    this.$nextTick(() =&gt; &#123;<br>      document.body.insertBefore(this.$el, document.body.lastChild)<br>    &#125;)<br>  &#125;,<br>  beforeDestroy () &#123;<br>    document.body.removeChild(this.$el)<br>  &#125;,<br>  methods: &#123;<br>    // 关闭弹窗<br>    handleClose () &#123; this.$emit(&#x27;close&#x27;) &#125;,<br>    // 确定按钮<br>    handleConfirm () &#123; this.$emit(&#x27;confirm&#x27;) &#125;,<br>    // 取消按钮<br>    handleCancle () &#123; this.$emit(&#x27;cancle&#x27;) &#125;,<br>    noop () &#123;&#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;less&quot; scoped&gt;<br>.u_dialog_panel &#123;<br>  .mask &#123;<br>    width: 100vw;<br>    height: 100vh;<br>    background-color: rgba(0, 0, 0, 0.5);<br>    position: fixed;<br>    left: 0;<br>    top: 0;<br>    z-index: 100;<br>    backdrop-filter: blur(5px);<br>  &#125;<br>  .dialog_body&#123;<br>    width: 80vw;<br>    background-color: #fff;<br>    position: fixed;<br>    left: 50vw;<br>    top: 50vh;<br>    z-index: 100;<br>    transform: translate(-50%, -50%);<br>    transform-origin: 0 0;<br>    border-radius: .875rem;<br>    &amp;.open-enter &#123;<br>      opacity: 0;<br>      transform: scale(0.7) translate(-50%, -50%);<br>      transition: all 0.3s;<br>    &#125;<br>    &amp;.open-enter-to &#123;<br>      opacity: 1;<br>      transform: scale(1) translate(-50%, -50%);<br>      transition: all 0.3s;<br>    &#125;<br>    .btns &#123;<br>      display: flex;<br>      justify-content: space-between;<br>      align-items: center;<br>      .btn &#123;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        flex-grow: 1;<br>        width: 50%;<br>        height: 2.875rem;<br>        border-top: 1px solid #ddd;<br>        box-sizing: border-box;<br>        display: flex;<br>        justify-content: center;<br>        align-items: center;<br>        font-size: .875rem;<br>        &amp; + .btn &#123;<br>          border-left: 1px solid #ddd;<br>        &#125;<br>        &amp;.cancle &#123;<br>          color: #666666;<br>        &#125;<br>        &amp;.confirm &#123;<br>          color: #FF5883;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>在此文件夹再新建一个index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Dialog from &#x27;./Dialog&#x27;<br><br>Dialog.install = function (Vue, options) &#123;<br>  Vue.component(`$&#123;Dialog.name&#125;`, Dialog)<br>&#125;<br><br>export default Dialog<br><br></code></pre></td></tr></table></figure></li><li><p>最后再main.js里注册为全局组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">import Dialog from &#x27;./components/Dialog/index.js&#x27;<br><br>Vue.use(Dialog)<br></code></pre></td></tr></table></figure></li></ol><h2 id="这样就可以在其他组件里无需声明而使用此组件"><a href="#这样就可以在其他组件里无需声明而使用此组件" class="headerlink" title="这样就可以在其他组件里无需声明而使用此组件"></a>这样就可以在其他组件里无需声明而使用此组件</h2>]]></content>
    
    
    <categories>
      
      <category>技术类-Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中的堆栈以及数据类型</title>
    <link href="/20210617/JavaScript%E4%B8%AD%E7%9A%84%E5%A0%86%E6%A0%88%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/20210617/JavaScript%E4%B8%AD%E7%9A%84%E5%A0%86%E6%A0%88%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="JavaScript的堆栈以及数据类型"><a href="#JavaScript的堆栈以及数据类型" class="headerlink" title="JavaScript的堆栈以及数据类型"></a>JavaScript的堆栈以及数据类型</h1><p><a href="https://www.jianshu.com/p/5e0e8d183102">本文参考此链接</a></p><p><strong>堆</strong> 是堆内存的简称。<strong>堆</strong>是动态分配内存，内存大小不一，也不会自动释放。<br><strong>栈</strong> 是栈内存的简称。<strong>栈</strong>是自动分配相对固定大小的内存空间，并由系统自动释放。<strong>后进先出</strong></p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><code>javascript</code>的<strong>基本类型</strong>就5种:<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和<code>String</code>，它们都是直接按值存储在栈中的，每种类型的数据占用的内存空间的大小是<strong>确定</strong>的，并由系统自动分配和自动释放。这样带来的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间。</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p><code>javascript</code>中其他类型的数据被称为<strong>引用类型</strong>的数据 : 如对象(Object)、数组(Array)、函数(Function) …，它们是通过拷贝和new出来的，这样的数据存储于堆中。其实，说存储于堆中，也不太准确，因为，引用类型的数据的地址指针是存储于栈中的，当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据。</p><h3 id="传值与传址"><a href="#传值与传址" class="headerlink" title="传值与传址"></a>传值与传址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>]; <br><span class="hljs-keyword">var</span> arr2 = arr1 ; <br><span class="hljs-keyword">var</span> str1 = arr1[<span class="hljs-number">2</span>]; <br><span class="hljs-built_in">console</span>.log(arr2);<span class="hljs-comment">//1,2,5,8</span><br><span class="hljs-built_in">console</span>.log(str1);<span class="hljs-comment">//5</span><br>arr2[<span class="hljs-number">4</span>] = <span class="hljs-number">99</span>; <br>str1 = <span class="hljs-number">6</span>; <br><span class="hljs-built_in">console</span>.log(arr1);<span class="hljs-comment">//1,2,5,8,99</span><br><span class="hljs-built_in">console</span>.log(arr1[<span class="hljs-number">2</span>]);<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><p>当我改变arr2中的数据时，arr1中数据也发生了变化，当改变str1的数据值时，arr1却没有发生改变。为什么？这就是<strong>传值与传址</strong>的区别。</p><p>因为arr1是数组，属于引用类型，所以它赋予给arr2的时候传的是栈中的地址（相当于新建了一个不同名“指针”），而不是堆内存中的对象的值。str1得到的是一个基本类型的赋值，因此，str1仅仅是从arr1堆内存中获取了一个数值，并直接保存在栈中。arr1、arr2都指向同一块堆内存，arr2修改的堆内存的时候，也就会影响到arr1，str1是直接在栈中修改，并且不能影响到arr1堆内存中的数据。</p><p><img src="https://images2018.cnblogs.com/blog/1402663/201808/1402663-20180802132101478-2092833591.png" alt="img"></p><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><p>上边说到的赋值方式就是浅拷贝，那么什么叫作深拷贝呢？就是要将arr1的每个基本类型的数据都遍历一遍，依次的赋值给arr2的对应字段。避免产生因为地址引用带来的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>]; <br><span class="hljs-keyword">var</span> arr2 = []; <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length;i++)&#123;<br>   arr2[i]=arr1[i];<br>&#125;;<br><span class="hljs-built_in">console</span>.log(arr2)<span class="hljs-comment">//1,2,5,8</span><br>arr2[<span class="hljs-number">4</span>]=<span class="hljs-number">99</span>;<br><span class="hljs-built_in">console</span>.log(arr2)<span class="hljs-comment">//1,2,5,8,99</span><br><span class="hljs-built_in">console</span>.log(arr1)<span class="hljs-comment">//1,2,5,8</span><br></code></pre></td></tr></table></figure><p>javascript面向对象的语言本身在处理对象和非对象上就进行了划分，从数据结构的角度来讲，对象就是栈的指针和堆中的数值。</p><h1 id="完"><a href="#完" class="headerlink" title="完~"></a>完~</h1>]]></content>
    
    
    <categories>
      
      <category>技术类-前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
