{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/bg/bg.jpg","path":"img/bg/bg.jpg","modified":0,"renderable":0},{"_id":"source/img/user/bilibili.jpeg","path":"img/user/bilibili.jpeg","modified":0,"renderable":0},{"_id":"source/img/user/cjl.jpeg","path":"img/user/cjl.jpeg","modified":0,"renderable":0},{"_id":"source/img/user/jianshu.jpeg","path":"img/user/jianshu.jpeg","modified":0,"renderable":0},{"_id":"source/img/user/user.jpg","path":"img/user/user.jpg","modified":0,"renderable":0},{"_id":"source/img/user/weChat.jpg","path":"img/user/weChat.jpg","modified":0,"renderable":0},{"_id":"source/img/user/webo.jpg","path":"img/user/webo.jpg","modified":0,"renderable":0},{"_id":"source/img/user/zoo.jpeg","path":"img/user/zoo.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"19332cfdf39a2776f27d87208af7b99819d9425f","modified":1631151814046},{"_id":"source/baidu_verify_code-TmkkRxX4ps.html","hash":"59ea65a0795dc0964e8b356cb89b666fef6e1a53","modified":1631151814047},{"_id":"source/_posts/2021-09-09-TypeScript中类的理解.md","hash":"5beb20be4e0893fc98d6371cdc9de99099753171","modified":1631172666409},{"_id":"source/_posts/about-me.md","hash":"67e9877a8378af1445ac56bf83cfb9d738031b1c","modified":1631151814046},{"_id":"source/about/index.md","hash":"aa86ca5928080082fd2db5ec9da4cd180ffedeb0","modified":1631151814047},{"_id":"source/img/.DS_Store","hash":"33d7c0611e82ae74e0a9d88c610183e7c4e9419b","modified":1631151814048},{"_id":"source/img/user/cjl.jpeg","hash":"8965600c5e613420121715435f69547c80040033","modified":1631151814051},{"_id":"source/img/user/jianshu.jpeg","hash":"e3f77ae1071b74c68f0a7237850a3dc7a41a9936","modified":1631012709659},{"_id":"source/img/user/user.jpg","hash":"5a1c8f2385741605649bacf36bfe84f3d0b7983a","modified":1631012709660},{"_id":"source/img/user/weChat.jpg","hash":"1c490e9ab2206003f6d84446bf8dc347b2d416ef","modified":1631012709662},{"_id":"source/img/user/bilibili.jpeg","hash":"2a1493d349d20f5b682a43639104ceeda3734ba1","modified":1631012709659},{"_id":"source/img/bg/bg.jpg","hash":"ce125626b444a7352363c53901d95ed0294c94ae","modified":1631151814050},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"76c2cf56f16dccb2fc057977f9dd7b39800a5cb4","modified":1630999001319},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"9328ebe2abbe00f82cd6f701230e80e04618ade0","modified":1631093425550},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":1631097677877},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"source/img/user/webo.jpg","hash":"e13a0af612e0944a2014104058242b4fbebe8e56","modified":1631012709670},{"_id":"source/img/user/zoo.jpeg","hash":"f3e7ff0029ef1c873e7b4efa5193cc6e383aff98","modified":1631151814067}],"Category":[{"name":"博客说明","_id":"cktcm18ho0005hcvq9y4o0vdt"}],"Data":[],"Page":[{"layout":"false","_content":"676194d86471561a70b8026338973ebc","source":"baidu_verify_code-TmkkRxX4ps.html","raw":"---\n\nlayout: false\n\n---\n676194d86471561a70b8026338973ebc","date":"2021-09-09T01:43:34.047Z","updated":"2021-09-09T01:43:34.047Z","path":"baidu_verify_code-TmkkRxX4ps.html","title":"","comments":1,"_id":"cktcm18he0000hcvq66b3ag64","content":"676194d86471561a70b8026338973ebc","site":{"data":{}},"excerpt":"","more":"676194d86471561a70b8026338973ebc"},{"title":"about","layout":"about","date":"2021-09-07T07:20:04.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2021-09-07 15:20:04\n---\n","updated":"2021-09-09T01:43:34.047Z","path":"about/index.html","comments":1,"_id":"cktcm18hk0002hcvq2o7n6gla","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"tech","title":"TypeScript中类的理解","date":"2021-09-06T06:48:00.000Z","_content":"\n# 一、是什么\n\n类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础\n> ❝类是一种用户定义的引用数据类型，也称类类型❞\n\n传统的面向对象语言基本都是基于类的，`JavaScript` 基于原型的方式让开发者多了很多理解成本\n在 `ES6` 之后，`JavaScript` 拥有了 `class` 关键字，虽然本质依然是构造函数，但是使用起来已经方便了许多\n但是`JavaScript` 的`class`依然有一些特性还没有加入，比如修饰符和抽象类\n`TypeScript` 的 `class`  支持面向对象的所有特性，比如 类、接口等\n# 二、使用方式\n定义类的关键字为 `class`，后面紧跟类名，类可以包含以下几个模块(类的数据成员)：\n\n「字段」：字段是类里面声明的变量。字段表示对象的有关数据。\n\n「构造函数」：类实例化时调用，可以为类的对象分配内存。\n\n「方法」：方法为对象要执行的操作\n如下例子：\n```typescript\nclass Car { \n    // 字段 \n    engine:string; \n \n    // 构造函数 \n    constructor(engine:string) { \n        this.engine = engine \n    }  \n \n    // 方法 \n    disp():void { \n        console.log(\"发动机为 :   \"+this.engine) \n    } \n}\n\n```\n\n## 继承\n类的继承使用过`extends`的关键字\n```typescript\nclass Animal {\n    move(distanceInMeters: number = 0) {\n        console.log(`Animal moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Dog extends Animal {\n    bark() {\n        console.log('Woof! Woof!');\n    }\n}\n\nconst dog = new Dog();\ndog.bark();\ndog.move(10);\ndog.bark();\n\n```\n\n`Dog`是一个 派生类，它派生自 `Animal` 基类，派生类通常被称作子类，基类通常被称作 **超类**。\n\n`Dog`类继承了`Animal`类，因此实例`dog`也能够使用`Animal`类`move`方法。\n同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。\n\n通过super关键字是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：\n```typescript\nclass PrinterClass { \n   doPrint():void {\n      console.log(\"父类的 doPrint() 方法。\") \n   } \n} \n \nclass StringPrinter extends PrinterClass { \n   doPrint():void { \n      super.doPrint() // 调用父类的函数\n      console.log(\"子类的 doPrint()方法。\")\n   } \n}\n\n```\n## 修饰符\n可以看到，上述的形式跟ES6十分的相似，typescript在此基础上添加了三种修饰符：\n\n- 公共 public：可以自由的访问类程序里定义的成员\n- 私有 private：只能够在该类的内部进行访问\n- 受保护 protect：除了在该类的内部可以访问，还可以在子类中仍然可以访问\n\n### 私有修饰符\n只能够在该类的内部进行访问，实例对象并不能够访问\n```typescript\nclass Father{\n    private name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nconst father = new Father('zouHuaLu')\nfather.name //会报错，提示 \"属性name为私有属性，只能在Father类中访问\"\n```\n并且继承该类的子类并不能访问，如下图所示：\n```typescript\nclass Father{\n    private name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nclass Son extends Father{\n    say(){\n        console.log(`my name is ${this.name}`)  //会报错，提示 \"属性name为私有属性，只能在Father类中访问\"\n    }\n}\n```\n### 受保护修饰符\n跟私有修饰符很相似，实例对象同样不能访问受保护的属性，如下：\n```typescript\nclass Father{\n    protected name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nconst father = new Father('zouHuaLu')\nfather.name //会报错，提示 \"属性name受保护，只能在类Father及其子类中访问\"\n```\n有一点不同的是 `protected` 成员在子类中仍然可以访问\n```typescript\nclass Father{\n    protected name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nclass Son extends Father{\n    say(){\n        console.log(`my name is ${this.name}`)\n    }\n}\n```\n\n### 只读修饰符\n通过`readonly`关键字进行声明，只读属性必须在声明时或构造函数里被初始化，如下：\n```typescript\nclass Father{\n    readonly name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nconst father = new Father('zouHuaLu')\nfather.name //会报错,提示\"无法分配到name，因为它是只读属性\"\n```\n\n### 静态属性\n这些属性存在于类本身上面而不是类的实例上，通过`static`进行定义，访问这些属性需要通过 `类型.静态属性` 的这种形式访问，如下所示：\n```typescript\nclass Square {\n    static width = '100px'\n}\n\nconsole.log(Square.width) // 100px\n```\n### 抽象类\n抽象类做为其它派生类的基类使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节\n`abstract`关键字是用于定义抽象类和在抽象类内部定义抽象方法，如下所示：\n```typescript\nabstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n```\n这种类并不能被实例化，通常需要我们创建子类去继承，如下：\n```typescript\nclass Cat extends Animal {\n\n    makeSound() {\n        console.log('miao miao')\n    }\n}\n\nconst cat = new Cat()\n\ncat.makeSound() // miao miao\ncat.move() // roaming the earch...\n```\n# 三、应用场景\n除了日常借助类的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在`React` 工程中是很常用的，如下：\n```typescript\nexport default class Carousel extends React.Component<Props, State> {}\n```\n由于组件需要传入 props 的类型 Props ，同时有需要设置默认 props 即 defaultProps，这时候更加适合使用class作为接口。\n\n先声明一个类，这个类包含组件 props 所需的类型和初始值：\n```typescript\n// props的类型\nexport default class Props {\n  public children: Array<React.ReactElement<any>> | React.ReactElement<any> | never[] = []\n  public speed: number = 500\n  public height: number = 160\n  public animation: string = 'easeInOutQuad'\n  public isAuto: boolean = true\n  public autoPlayInterval: number = 4500\n  public afterChange: () => {}\n  public beforeChange: () => {}\n  public selesctedColor: string\n  public showDots: boolean = true\n}\n```\n当我们需要传入 `props` 类型的时候直接将 `Props` 作为接口传入，此时 `Props` 的作用就是接口，而当需要我们设置`defaultProps`初始值的时候，我们只需要:\n```typescript\npublic static defaultProps = new Props()\n```\n`Props` 的实例就是 `defaultProps` 的初始值，这就是 `class`作为接口的实际应用，我们用一个 `class` 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量\n\n# 参考文章\n- https://www.tslang.cn/docs/handbook/classes.html\n- https://www.runoob.com/typescript/ts-class.html","source":"_posts/2021-09-09-TypeScript中类的理解.md","raw":"---\nlayout: tech\ntitle: TypeScript中类的理解\ndate: 2021-09-06 14:48:00\ntags: TypeScript\n---\n\n# 一、是什么\n\n类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础\n> ❝类是一种用户定义的引用数据类型，也称类类型❞\n\n传统的面向对象语言基本都是基于类的，`JavaScript` 基于原型的方式让开发者多了很多理解成本\n在 `ES6` 之后，`JavaScript` 拥有了 `class` 关键字，虽然本质依然是构造函数，但是使用起来已经方便了许多\n但是`JavaScript` 的`class`依然有一些特性还没有加入，比如修饰符和抽象类\n`TypeScript` 的 `class`  支持面向对象的所有特性，比如 类、接口等\n# 二、使用方式\n定义类的关键字为 `class`，后面紧跟类名，类可以包含以下几个模块(类的数据成员)：\n\n「字段」：字段是类里面声明的变量。字段表示对象的有关数据。\n\n「构造函数」：类实例化时调用，可以为类的对象分配内存。\n\n「方法」：方法为对象要执行的操作\n如下例子：\n```typescript\nclass Car { \n    // 字段 \n    engine:string; \n \n    // 构造函数 \n    constructor(engine:string) { \n        this.engine = engine \n    }  \n \n    // 方法 \n    disp():void { \n        console.log(\"发动机为 :   \"+this.engine) \n    } \n}\n\n```\n\n## 继承\n类的继承使用过`extends`的关键字\n```typescript\nclass Animal {\n    move(distanceInMeters: number = 0) {\n        console.log(`Animal moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Dog extends Animal {\n    bark() {\n        console.log('Woof! Woof!');\n    }\n}\n\nconst dog = new Dog();\ndog.bark();\ndog.move(10);\ndog.bark();\n\n```\n\n`Dog`是一个 派生类，它派生自 `Animal` 基类，派生类通常被称作子类，基类通常被称作 **超类**。\n\n`Dog`类继承了`Animal`类，因此实例`dog`也能够使用`Animal`类`move`方法。\n同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。\n\n通过super关键字是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：\n```typescript\nclass PrinterClass { \n   doPrint():void {\n      console.log(\"父类的 doPrint() 方法。\") \n   } \n} \n \nclass StringPrinter extends PrinterClass { \n   doPrint():void { \n      super.doPrint() // 调用父类的函数\n      console.log(\"子类的 doPrint()方法。\")\n   } \n}\n\n```\n## 修饰符\n可以看到，上述的形式跟ES6十分的相似，typescript在此基础上添加了三种修饰符：\n\n- 公共 public：可以自由的访问类程序里定义的成员\n- 私有 private：只能够在该类的内部进行访问\n- 受保护 protect：除了在该类的内部可以访问，还可以在子类中仍然可以访问\n\n### 私有修饰符\n只能够在该类的内部进行访问，实例对象并不能够访问\n```typescript\nclass Father{\n    private name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nconst father = new Father('zouHuaLu')\nfather.name //会报错，提示 \"属性name为私有属性，只能在Father类中访问\"\n```\n并且继承该类的子类并不能访问，如下图所示：\n```typescript\nclass Father{\n    private name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nclass Son extends Father{\n    say(){\n        console.log(`my name is ${this.name}`)  //会报错，提示 \"属性name为私有属性，只能在Father类中访问\"\n    }\n}\n```\n### 受保护修饰符\n跟私有修饰符很相似，实例对象同样不能访问受保护的属性，如下：\n```typescript\nclass Father{\n    protected name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nconst father = new Father('zouHuaLu')\nfather.name //会报错，提示 \"属性name受保护，只能在类Father及其子类中访问\"\n```\n有一点不同的是 `protected` 成员在子类中仍然可以访问\n```typescript\nclass Father{\n    protected name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nclass Son extends Father{\n    say(){\n        console.log(`my name is ${this.name}`)\n    }\n}\n```\n\n### 只读修饰符\n通过`readonly`关键字进行声明，只读属性必须在声明时或构造函数里被初始化，如下：\n```typescript\nclass Father{\n    readonly name:String\n    constructor(name:String){\n        this.name = name\n    }\n}\nconst father = new Father('zouHuaLu')\nfather.name //会报错,提示\"无法分配到name，因为它是只读属性\"\n```\n\n### 静态属性\n这些属性存在于类本身上面而不是类的实例上，通过`static`进行定义，访问这些属性需要通过 `类型.静态属性` 的这种形式访问，如下所示：\n```typescript\nclass Square {\n    static width = '100px'\n}\n\nconsole.log(Square.width) // 100px\n```\n### 抽象类\n抽象类做为其它派生类的基类使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节\n`abstract`关键字是用于定义抽象类和在抽象类内部定义抽象方法，如下所示：\n```typescript\nabstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n```\n这种类并不能被实例化，通常需要我们创建子类去继承，如下：\n```typescript\nclass Cat extends Animal {\n\n    makeSound() {\n        console.log('miao miao')\n    }\n}\n\nconst cat = new Cat()\n\ncat.makeSound() // miao miao\ncat.move() // roaming the earch...\n```\n# 三、应用场景\n除了日常借助类的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在`React` 工程中是很常用的，如下：\n```typescript\nexport default class Carousel extends React.Component<Props, State> {}\n```\n由于组件需要传入 props 的类型 Props ，同时有需要设置默认 props 即 defaultProps，这时候更加适合使用class作为接口。\n\n先声明一个类，这个类包含组件 props 所需的类型和初始值：\n```typescript\n// props的类型\nexport default class Props {\n  public children: Array<React.ReactElement<any>> | React.ReactElement<any> | never[] = []\n  public speed: number = 500\n  public height: number = 160\n  public animation: string = 'easeInOutQuad'\n  public isAuto: boolean = true\n  public autoPlayInterval: number = 4500\n  public afterChange: () => {}\n  public beforeChange: () => {}\n  public selesctedColor: string\n  public showDots: boolean = true\n}\n```\n当我们需要传入 `props` 类型的时候直接将 `Props` 作为接口传入，此时 `Props` 的作用就是接口，而当需要我们设置`defaultProps`初始值的时候，我们只需要:\n```typescript\npublic static defaultProps = new Props()\n```\n`Props` 的实例就是 `defaultProps` 的初始值，这就是 `class`作为接口的实际应用，我们用一个 `class` 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量\n\n# 参考文章\n- https://www.tslang.cn/docs/handbook/classes.html\n- https://www.runoob.com/typescript/ts-class.html","slug":"TypeScript中类的理解","published":1,"updated":"2021-09-09T07:31:06.409Z","_id":"cktcm18hg0001hcvq3ai96del","comments":1,"photos":[],"link":"","content":"<h1 id=\"一、是什么\"><a href=\"#一、是什么\" class=\"headerlink\" title=\"一、是什么\"></a>一、是什么</h1><p>类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础</p>\n<blockquote>\n<p>❝类是一种用户定义的引用数据类型，也称类类型❞</p>\n</blockquote>\n<p>传统的面向对象语言基本都是基于类的，<code>JavaScript</code> 基于原型的方式让开发者多了很多理解成本<br>在 <code>ES6</code> 之后，<code>JavaScript</code> 拥有了 <code>class</code> 关键字，虽然本质依然是构造函数，但是使用起来已经方便了许多<br>但是<code>JavaScript</code> 的<code>class</code>依然有一些特性还没有加入，比如修饰符和抽象类<br><code>TypeScript</code> 的 <code>class</code>  支持面向对象的所有特性，比如 类、接口等</p>\n<h1 id=\"二、使用方式\"><a href=\"#二、使用方式\" class=\"headerlink\" title=\"二、使用方式\"></a>二、使用方式</h1><p>定义类的关键字为 <code>class</code>，后面紧跟类名，类可以包含以下几个模块(类的数据成员)：</p>\n<p>「字段」：字段是类里面声明的变量。字段表示对象的有关数据。</p>\n<p>「构造函数」：类实例化时调用，可以为类的对象分配内存。</p>\n<p>「方法」：方法为对象要执行的操作<br>如下例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Car</span> </span>&#123; <br>    <span class=\"hljs-comment\">// 字段 </span><br>    <span class=\"hljs-attr\">engine</span>:<span class=\"hljs-built_in\">string</span>; <br> <br>    <span class=\"hljs-comment\">// 构造函数 </span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">engine:<span class=\"hljs-built_in\">string</span></span>)</span> &#123; <br>        <span class=\"hljs-built_in\">this</span>.engine = engine <br>    &#125;  <br> <br>    <span class=\"hljs-comment\">// 方法 </span><br>    disp():<span class=\"hljs-built_in\">void</span> &#123; <br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;发动机为 :   &quot;</span>+<span class=\"hljs-built_in\">this</span>.engine) <br>    &#125; <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>类的继承使用过<code>extends</code>的关键字</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>)</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Animal moved <span class=\"hljs-subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">bark</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Woof! Woof!&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> Dog();<br>dog.bark();<br>dog.move(<span class=\"hljs-number\">10</span>);<br>dog.bark();<br><br></code></pre></td></tr></table></figure>\n\n<p><code>Dog</code>是一个 派生类，它派生自 <code>Animal</code> 基类，派生类通常被称作子类，基类通常被称作 <strong>超类</strong>。</p>\n<p><code>Dog</code>类继承了<code>Animal</code>类，因此实例<code>dog</code>也能够使用<code>Animal</code>类<code>move</code>方法。<br>同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。</p>\n<p>通过super关键字是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PrinterClass</span> </span>&#123; <br>   doPrint():<span class=\"hljs-built_in\">void</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父类的 doPrint() 方法。&quot;</span>) <br>   &#125; <br>&#125; <br> <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StringPrinter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PrinterClass</span> </span>&#123; <br>   doPrint():<span class=\"hljs-built_in\">void</span> &#123; <br>      <span class=\"hljs-built_in\">super</span>.doPrint() <span class=\"hljs-comment\">// 调用父类的函数</span><br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;子类的 doPrint()方法。&quot;</span>)<br>   &#125; <br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><p>可以看到，上述的形式跟ES6十分的相似，typescript在此基础上添加了三种修饰符：</p>\n<ul>\n<li>公共 public：可以自由的访问类程序里定义的成员</li>\n<li>私有 private：只能够在该类的内部进行访问</li>\n<li>受保护 protect：除了在该类的内部可以访问，还可以在子类中仍然可以访问</li>\n</ul>\n<h3 id=\"私有修饰符\"><a href=\"#私有修饰符\" class=\"headerlink\" title=\"私有修饰符\"></a>私有修饰符</h3><p>只能够在该类的内部进行访问，实例对象并不能够访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> father = <span class=\"hljs-keyword\">new</span> Father(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class=\"hljs-comment\">//会报错，提示 &quot;属性name为私有属性，只能在Father类中访问&quot;</span><br></code></pre></td></tr></table></figure>\n<p>并且继承该类的子类并不能访问，如下图所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)  <span class=\"hljs-comment\">//会报错，提示 &quot;属性name为私有属性，只能在Father类中访问&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"受保护修饰符\"><a href=\"#受保护修饰符\" class=\"headerlink\" title=\"受保护修饰符\"></a>受保护修饰符</h3><p>跟私有修饰符很相似，实例对象同样不能访问受保护的属性，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">protected</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> father = <span class=\"hljs-keyword\">new</span> Father(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class=\"hljs-comment\">//会报错，提示 &quot;属性name受保护，只能在类Father及其子类中访问&quot;</span><br></code></pre></td></tr></table></figure>\n<p>有一点不同的是 <code>protected</code> 成员在子类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">protected</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"只读修饰符\"><a href=\"#只读修饰符\" class=\"headerlink\" title=\"只读修饰符\"></a>只读修饰符</h3><p>通过<code>readonly</code>关键字进行声明，只读属性必须在声明时或构造函数里被初始化，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">readonly</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> father = <span class=\"hljs-keyword\">new</span> Father(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class=\"hljs-comment\">//会报错,提示&quot;无法分配到name，因为它是只读属性&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h3><p>这些属性存在于类本身上面而不是类的实例上，通过<code>static</code>进行定义，访问这些属性需要通过 <code>类型.静态属性</code> 的这种形式访问，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Square</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> width = <span class=\"hljs-string\">&#x27;100px&#x27;</span><br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(Square.width) <span class=\"hljs-comment\">// 100px</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节<br><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>    <span class=\"hljs-keyword\">abstract</span> makeSound(): <span class=\"hljs-built_in\">void</span>;<br>    move(): <span class=\"hljs-built_in\">void</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;roaming the earch...&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这种类并不能被实例化，通常需要我们创建子类去继承，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">makeSound</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;miao miao&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> Cat()<br><br>cat.makeSound() <span class=\"hljs-comment\">// miao miao</span><br>cat.move() <span class=\"hljs-comment\">// roaming the earch...</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"三、应用场景\"><a href=\"#三、应用场景\" class=\"headerlink\" title=\"三、应用场景\"></a>三、应用场景</h1><p>除了日常借助类的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在<code>React</code> 工程中是很常用的，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Carousel</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span>&lt;<span class=\"hljs-title\">Props</span>, <span class=\"hljs-title\">State</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>由于组件需要传入 props 的类型 Props ，同时有需要设置默认 props 即 defaultProps，这时候更加适合使用class作为接口。</p>\n<p>先声明一个类，这个类包含组件 props 所需的类型和初始值：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// props的类型</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Props</span> </span>&#123;<br>  <span class=\"hljs-keyword\">public</span> children: <span class=\"hljs-built_in\">Array</span>&lt;React.ReactElement&lt;<span class=\"hljs-built_in\">any</span>&gt;&gt; | React.ReactElement&lt;<span class=\"hljs-built_in\">any</span>&gt; | <span class=\"hljs-built_in\">never</span>[] = []<br>  <span class=\"hljs-keyword\">public</span> speed: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">500</span><br>  <span class=\"hljs-keyword\">public</span> height: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">160</span><br>  <span class=\"hljs-keyword\">public</span> animation: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;easeInOutQuad&#x27;</span><br>  <span class=\"hljs-keyword\">public</span> isAuto: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-keyword\">public</span> autoPlayInterval: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">4500</span><br>  <span class=\"hljs-keyword\">public</span> afterChange: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;<br>  <span class=\"hljs-keyword\">public</span> beforeChange: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;<br>  <span class=\"hljs-keyword\">public</span> selesctedColor: <span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-keyword\">public</span> showDots: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当我们需要传入 <code>props</code> 类型的时候直接将 <code>Props</code> 作为接口传入，此时 <code>Props</code> 的作用就是接口，而当需要我们设置<code>defaultProps</code>初始值的时候，我们只需要:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> defaultProps = <span class=\"hljs-keyword\">new</span> Props()<br></code></pre></td></tr></table></figure>\n<p><code>Props</code> 的实例就是 <code>defaultProps</code> 的初始值，这就是 <code>class</code>作为接口的实际应用，我们用一个 <code>class</code> 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/classes.html\">https://www.tslang.cn/docs/handbook/classes.html</a></li>\n<li><a href=\"https://www.runoob.com/typescript/ts-class.html\">https://www.runoob.com/typescript/ts-class.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、是什么\"><a href=\"#一、是什么\" class=\"headerlink\" title=\"一、是什么\"></a>一、是什么</h1><p>类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础</p>\n<blockquote>\n<p>❝类是一种用户定义的引用数据类型，也称类类型❞</p>\n</blockquote>\n<p>传统的面向对象语言基本都是基于类的，<code>JavaScript</code> 基于原型的方式让开发者多了很多理解成本<br>在 <code>ES6</code> 之后，<code>JavaScript</code> 拥有了 <code>class</code> 关键字，虽然本质依然是构造函数，但是使用起来已经方便了许多<br>但是<code>JavaScript</code> 的<code>class</code>依然有一些特性还没有加入，比如修饰符和抽象类<br><code>TypeScript</code> 的 <code>class</code>  支持面向对象的所有特性，比如 类、接口等</p>\n<h1 id=\"二、使用方式\"><a href=\"#二、使用方式\" class=\"headerlink\" title=\"二、使用方式\"></a>二、使用方式</h1><p>定义类的关键字为 <code>class</code>，后面紧跟类名，类可以包含以下几个模块(类的数据成员)：</p>\n<p>「字段」：字段是类里面声明的变量。字段表示对象的有关数据。</p>\n<p>「构造函数」：类实例化时调用，可以为类的对象分配内存。</p>\n<p>「方法」：方法为对象要执行的操作<br>如下例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Car</span> </span>&#123; <br>    <span class=\"hljs-comment\">// 字段 </span><br>    <span class=\"hljs-attr\">engine</span>:<span class=\"hljs-built_in\">string</span>; <br> <br>    <span class=\"hljs-comment\">// 构造函数 </span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">engine:<span class=\"hljs-built_in\">string</span></span>)</span> &#123; <br>        <span class=\"hljs-built_in\">this</span>.engine = engine <br>    &#125;  <br> <br>    <span class=\"hljs-comment\">// 方法 </span><br>    disp():<span class=\"hljs-built_in\">void</span> &#123; <br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;发动机为 :   &quot;</span>+<span class=\"hljs-built_in\">this</span>.engine) <br>    &#125; <br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>类的继承使用过<code>extends</code>的关键字</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>)</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Animal moved <span class=\"hljs-subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">bark</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Woof! Woof!&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> Dog();<br>dog.bark();<br>dog.move(<span class=\"hljs-number\">10</span>);<br>dog.bark();<br><br></code></pre></td></tr></table></figure>\n\n<p><code>Dog</code>是一个 派生类，它派生自 <code>Animal</code> 基类，派生类通常被称作子类，基类通常被称作 <strong>超类</strong>。</p>\n<p><code>Dog</code>类继承了<code>Animal</code>类，因此实例<code>dog</code>也能够使用<code>Animal</code>类<code>move</code>方法。<br>同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写。</p>\n<p>通过super关键字是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PrinterClass</span> </span>&#123; <br>   doPrint():<span class=\"hljs-built_in\">void</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;父类的 doPrint() 方法。&quot;</span>) <br>   &#125; <br>&#125; <br> <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StringPrinter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PrinterClass</span> </span>&#123; <br>   doPrint():<span class=\"hljs-built_in\">void</span> &#123; <br>      <span class=\"hljs-built_in\">super</span>.doPrint() <span class=\"hljs-comment\">// 调用父类的函数</span><br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;子类的 doPrint()方法。&quot;</span>)<br>   &#125; <br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h2 id=\"修饰符\"><a href=\"#修饰符\" class=\"headerlink\" title=\"修饰符\"></a>修饰符</h2><p>可以看到，上述的形式跟ES6十分的相似，typescript在此基础上添加了三种修饰符：</p>\n<ul>\n<li>公共 public：可以自由的访问类程序里定义的成员</li>\n<li>私有 private：只能够在该类的内部进行访问</li>\n<li>受保护 protect：除了在该类的内部可以访问，还可以在子类中仍然可以访问</li>\n</ul>\n<h3 id=\"私有修饰符\"><a href=\"#私有修饰符\" class=\"headerlink\" title=\"私有修饰符\"></a>私有修饰符</h3><p>只能够在该类的内部进行访问，实例对象并不能够访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> father = <span class=\"hljs-keyword\">new</span> Father(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class=\"hljs-comment\">//会报错，提示 &quot;属性name为私有属性，只能在Father类中访问&quot;</span><br></code></pre></td></tr></table></figure>\n<p>并且继承该类的子类并不能访问，如下图所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)  <span class=\"hljs-comment\">//会报错，提示 &quot;属性name为私有属性，只能在Father类中访问&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"受保护修饰符\"><a href=\"#受保护修饰符\" class=\"headerlink\" title=\"受保护修饰符\"></a>受保护修饰符</h3><p>跟私有修饰符很相似，实例对象同样不能访问受保护的属性，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">protected</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> father = <span class=\"hljs-keyword\">new</span> Father(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class=\"hljs-comment\">//会报错，提示 &quot;属性name受保护，只能在类Father及其子类中访问&quot;</span><br></code></pre></td></tr></table></figure>\n<p>有一点不同的是 <code>protected</code> 成员在子类中仍然可以访问</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">protected</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span>`</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"只读修饰符\"><a href=\"#只读修饰符\" class=\"headerlink\" title=\"只读修饰符\"></a>只读修饰符</h3><p>通过<code>readonly</code>关键字进行声明，只读属性必须在声明时或构造函数里被初始化，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">readonly</span> name:<span class=\"hljs-built_in\">String</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">String</span></span>)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> father = <span class=\"hljs-keyword\">new</span> Father(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>father.name <span class=\"hljs-comment\">//会报错,提示&quot;无法分配到name，因为它是只读属性&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h3><p>这些属性存在于类本身上面而不是类的实例上，通过<code>static</code>进行定义，访问这些属性需要通过 <code>类型.静态属性</code> 的这种形式访问，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Square</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> width = <span class=\"hljs-string\">&#x27;100px&#x27;</span><br>&#125;<br><br><span class=\"hljs-built_in\">console</span>.log(Square.width) <span class=\"hljs-comment\">// 100px</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节<br><code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br>    <span class=\"hljs-keyword\">abstract</span> makeSound(): <span class=\"hljs-built_in\">void</span>;<br>    move(): <span class=\"hljs-built_in\">void</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;roaming the earch...&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这种类并不能被实例化，通常需要我们创建子类去继承，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">makeSound</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;miao miao&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> Cat()<br><br>cat.makeSound() <span class=\"hljs-comment\">// miao miao</span><br>cat.move() <span class=\"hljs-comment\">// roaming the earch...</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"三、应用场景\"><a href=\"#三、应用场景\" class=\"headerlink\" title=\"三、应用场景\"></a>三、应用场景</h1><p>除了日常借助类的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在<code>React</code> 工程中是很常用的，如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Carousel</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span>&lt;<span class=\"hljs-title\">Props</span>, <span class=\"hljs-title\">State</span>&gt; </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>由于组件需要传入 props 的类型 Props ，同时有需要设置默认 props 即 defaultProps，这时候更加适合使用class作为接口。</p>\n<p>先声明一个类，这个类包含组件 props 所需的类型和初始值：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// props的类型</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Props</span> </span>&#123;<br>  <span class=\"hljs-keyword\">public</span> children: <span class=\"hljs-built_in\">Array</span>&lt;React.ReactElement&lt;<span class=\"hljs-built_in\">any</span>&gt;&gt; | React.ReactElement&lt;<span class=\"hljs-built_in\">any</span>&gt; | <span class=\"hljs-built_in\">never</span>[] = []<br>  <span class=\"hljs-keyword\">public</span> speed: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">500</span><br>  <span class=\"hljs-keyword\">public</span> height: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">160</span><br>  <span class=\"hljs-keyword\">public</span> animation: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;easeInOutQuad&#x27;</span><br>  <span class=\"hljs-keyword\">public</span> isAuto: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-keyword\">public</span> autoPlayInterval: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">4500</span><br>  <span class=\"hljs-keyword\">public</span> afterChange: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;<br>  <span class=\"hljs-keyword\">public</span> beforeChange: <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;<br>  <span class=\"hljs-keyword\">public</span> selesctedColor: <span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-keyword\">public</span> showDots: <span class=\"hljs-built_in\">boolean</span> = <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当我们需要传入 <code>props</code> 类型的时候直接将 <code>Props</code> 作为接口传入，此时 <code>Props</code> 的作用就是接口，而当需要我们设置<code>defaultProps</code>初始值的时候，我们只需要:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> defaultProps = <span class=\"hljs-keyword\">new</span> Props()<br></code></pre></td></tr></table></figure>\n<p><code>Props</code> 的实例就是 <code>defaultProps</code> 的初始值，这就是 <code>class</code>作为接口的实际应用，我们用一个 <code>class</code> 起到了接口和设置初始值两个作用，方便统一管理，减少了代码量</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.tslang.cn/docs/handbook/classes.html\">https://www.tslang.cn/docs/handbook/classes.html</a></li>\n<li><a href=\"https://www.runoob.com/typescript/ts-class.html\">https://www.runoob.com/typescript/ts-class.html</a></li>\n</ul>\n"},{"title":"本博客说明书","date":"2021-09-07T03:19:02.000Z","comments":1,"_content":"{% blockquote %}\n幸福不是一件容易的事：她很难求之于自身，但要想在别处得到则不可能。——尚福尔\n{% endblockquote %}\n\n19年搭过一个博客，可惜不好用，上传的图片经常不显示，于是就放弃使用了，后来把地址搞丢了找不回来了。\n所以我又重新搭了一个。\n后续会把写过的文档陆续上传到这边\n\n以下是功能测试：\n\n嵌入YOUTUBE视频\n{% youtube lJIrF4YjHfQ %}\n\n嵌入B站视频\n{% raw %}\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=846655043&bvid=BV1e54y1n7XK&cid=371989206&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\"allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; Left: 0; top: 0;\"> </iframe></div>\n{% endraw %}\n\n\n嵌入图片\n![背景图](/img/bg/bg.jpg)\n![长颈鹿](/img/user/zoo.jpeg)\n\n\n代码块\n```javaScript\nconsole.log('zouHuaLu')\nhexo g\nhexo g -w\nhexo server\nhexo clean\nhexo deploy\n```\n\n如果你看到`We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.`,说明本博客的评论功能有问题，后续有时间再改吧","source":"_posts/about-me.md","raw":"---\ntitle: 本博客说明书\ndate: 2021-09-07 11:19:02\ntags: 博客说明\ncategories: 博客说明\ncomments: true\n---\n{% blockquote %}\n幸福不是一件容易的事：她很难求之于自身，但要想在别处得到则不可能。——尚福尔\n{% endblockquote %}\n\n19年搭过一个博客，可惜不好用，上传的图片经常不显示，于是就放弃使用了，后来把地址搞丢了找不回来了。\n所以我又重新搭了一个。\n后续会把写过的文档陆续上传到这边\n\n以下是功能测试：\n\n嵌入YOUTUBE视频\n{% youtube lJIrF4YjHfQ %}\n\n嵌入B站视频\n{% raw %}\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=846655043&bvid=BV1e54y1n7XK&cid=371989206&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\"allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; Left: 0; top: 0;\"> </iframe></div>\n{% endraw %}\n\n\n嵌入图片\n![背景图](/img/bg/bg.jpg)\n![长颈鹿](/img/user/zoo.jpeg)\n\n\n代码块\n```javaScript\nconsole.log('zouHuaLu')\nhexo g\nhexo g -w\nhexo server\nhexo clean\nhexo deploy\n```\n\n如果你看到`We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.`,说明本博客的评论功能有问题，后续有时间再改吧","slug":"about-me","published":1,"updated":"2021-09-09T01:43:34.046Z","layout":"post","photos":[],"link":"","_id":"cktcm18hl0003hcvqhgzs77xs","content":"<blockquote><p>幸福不是一件容易的事：她很难求之于自身，但要想在别处得到则不可能。——尚福尔</p>\n</blockquote>\n\n<p>19年搭过一个博客，可惜不好用，上传的图片经常不显示，于是就放弃使用了，后来把地址搞丢了找不回来了。<br>所以我又重新搭了一个。<br>后续会把写过的文档陆续上传到这边</p>\n<p>以下是功能测试：</p>\n<p>嵌入YOUTUBE视频</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/lJIrF4YjHfQ\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<p>嵌入B站视频</p>\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=846655043&bvid=BV1e54y1n7XK&cid=371989206&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\"allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; Left: 0; top: 0;\"> </iframe></div>\n\n\n\n<p>嵌入图片<br><img src=\"/img/bg/bg.jpg\" alt=\"背景图\"><br><img src=\"/img/user/zoo.jpeg\" alt=\"长颈鹿\"></p>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javaScript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>hexo g<br>hexo g -w<br>hexo server<br>hexo clean<br>hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>如果你看到<code>We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.</code>,说明本博客的评论功能有问题，后续有时间再改吧</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote><p>幸福不是一件容易的事：她很难求之于自身，但要想在别处得到则不可能。——尚福尔</p>\n</blockquote>\n\n<p>19年搭过一个博客，可惜不好用，上传的图片经常不显示，于是就放弃使用了，后来把地址搞丢了找不回来了。<br>所以我又重新搭了一个。<br>后续会把写过的文档陆续上传到这边</p>\n<p>以下是功能测试：</p>\n<p>嵌入YOUTUBE视频</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/lJIrF4YjHfQ\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<p>嵌入B站视频</p>\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=846655043&bvid=BV1e54y1n7XK&cid=371989206&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\"allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; Left: 0; top: 0;\"> </iframe></div>\n\n\n\n<p>嵌入图片<br><img src=\"/img/bg/bg.jpg\" alt=\"背景图\"><br><img src=\"/img/user/zoo.jpeg\" alt=\"长颈鹿\"></p>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javaScript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;zouHuaLu&#x27;</span>)<br>hexo g<br>hexo g -w<br>hexo server<br>hexo clean<br>hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>如果你看到<code>We were unable to load Disqus. If you are a moderator please see our troubleshooting guide.</code>,说明本博客的评论功能有问题，后续有时间再改吧</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktcm18hl0003hcvqhgzs77xs","category_id":"cktcm18ho0005hcvq9y4o0vdt","_id":"cktcm18hq0008hcvqh3en59s2"}],"PostTag":[{"post_id":"cktcm18hg0001hcvq3ai96del","tag_id":"cktcm18hm0004hcvq60613tqw","_id":"cktcm18hp0007hcvq4hswds9k"},{"post_id":"cktcm18hl0003hcvqhgzs77xs","tag_id":"cktcm18hp0006hcvqdogv6is3","_id":"cktcm18hq0009hcvqdxeg6uyt"}],"Tag":[{"name":"TypeScript","_id":"cktcm18hm0004hcvq60613tqw"},{"name":"博客说明","_id":"cktcm18hp0006hcvqdogv6is3"}]}}